<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>_int_free (1 samples, 0.28%)</title><rect x="0.0000%" y="437" width="0.2762%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="447.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (1 samples, 0.28%)</title><rect x="0.2762%" y="437" width="0.2762%" height="15" fill="rgb(217,0,24)"/><text x="0.5262%" y="447.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="0.2762%" y="421" width="0.2762%" height="15" fill="rgb(221,193,54)"/><text x="0.5262%" y="431.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="0.2762%" y="405" width="0.2762%" height="15" fill="rgb(248,212,6)"/><text x="0.5262%" y="415.50"></text></g><g><title>[[stack]] (3 samples, 0.83%)</title><rect x="0.0000%" y="453" width="0.8287%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="463.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="0.5525%" y="437" width="0.2762%" height="15" fill="rgb(232,128,0)"/><text x="0.8025%" y="447.50"></text></g><g><title>LFT::~LFT (1 samples, 0.28%)</title><rect x="0.8287%" y="437" width="0.2762%" height="15" fill="rgb(207,160,47)"/><text x="1.0787%" y="447.50"></text></g><g><title>_Z6streamI3LFTSt4pairIS0_N5boost14multiprecision6numberINS3_8backends15cpp_int_backendILj0ELj0ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0ESaIyEEELNS3_26expression_template_optionE1EEEESC_EN7cppcoro9generatorIT1_EEPFSG_RKT0_EPFbSK_RKSG_EPFSI_SK_SO_EPFSI_SK_RKT_ESI_NSF_IST_EE.actor (1 samples, 0.28%)</title><rect x="1.1050%" y="437" width="0.2762%" height="15" fill="rgb(228,23,34)"/><text x="1.3550%" y="447.50"></text></g><g><title>cppcoro::detail::generator_iterator&lt;LFT&gt;::operator++ (1 samples, 0.28%)</title><rect x="1.1050%" y="421" width="0.2762%" height="15" fill="rgb(218,30,26)"/><text x="1.3550%" y="431.50"></text></g><g><title>std::__n4861::coroutine_handle&lt;cppcoro::detail::generator_promise&lt;LFT&gt; &gt;::resume (1 samples, 0.28%)</title><rect x="1.1050%" y="405" width="0.2762%" height="15" fill="rgb(220,122,19)"/><text x="1.3550%" y="415.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.55%)</title><rect x="1.3812%" y="437" width="0.5525%" height="15" fill="rgb(250,228,42)"/><text x="1.6312%" y="447.50"></text></g><g><title>[unknown] (5 samples, 1.38%)</title><rect x="0.8287%" y="453" width="1.3812%" height="15" fill="rgb(240,193,28)"/><text x="1.0787%" y="463.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (1 samples, 0.28%)</title><rect x="1.9337%" y="437" width="0.2762%" height="15" fill="rgb(216,20,37)"/><text x="2.1837%" y="447.50"></text></g><g><title>__printf (1 samples, 0.28%)</title><rect x="3.5912%" y="405" width="0.2762%" height="15" fill="rgb(206,188,39)"/><text x="3.8412%" y="415.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.28%)</title><rect x="3.5912%" y="389" width="0.2762%" height="15" fill="rgb(217,207,13)"/><text x="3.8412%" y="399.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number (1 samples, 0.28%)</title><rect x="3.8674%" y="405" width="0.2762%" height="15" fill="rgb(231,73,38)"/><text x="4.1174%" y="415.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::cpp_int_backend (1 samples, 0.28%)</title><rect x="3.8674%" y="389" width="0.2762%" height="15" fill="rgb(225,20,46)"/><text x="4.1174%" y="399.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (1 samples, 0.28%)</title><rect x="3.8674%" y="373" width="0.2762%" height="15" fill="rgb(210,31,41)"/><text x="4.1174%" y="383.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::data_type::data_type (1 samples, 0.28%)</title><rect x="3.8674%" y="357" width="0.2762%" height="15" fill="rgb(221,200,47)"/><text x="4.1174%" y="367.50"></text></g><g><title>cppcoro::detail::generator_iterator&lt;LFT&gt;::operator++ (1 samples, 0.28%)</title><rect x="4.1436%" y="357" width="0.2762%" height="15" fill="rgb(226,26,5)"/><text x="4.3936%" y="367.50"></text></g><g><title>std::__n4861::coroutine_handle&lt;cppcoro::detail::generator_promise&lt;LFT&gt; &gt;::resume (1 samples, 0.28%)</title><rect x="4.1436%" y="341" width="0.2762%" height="15" fill="rgb(249,33,26)"/><text x="4.3936%" y="351.50"></text></g><g><title>cppcoro::fmap&lt;pi_lambert_lfts()::{lambda(auto:1)#1}, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (1 samples, 0.28%)</title><rect x="4.1436%" y="325" width="0.2762%" height="15" fill="rgb(235,183,28)"/><text x="4.3936%" y="335.50"></text></g><g><title>std::invoke&lt;pi_lambert_lfts()::{lambda(auto:1)#1}&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;&amp;&gt; (1 samples, 0.28%)</title><rect x="4.1436%" y="309" width="0.2762%" height="15" fill="rgb(221,5,38)"/><text x="4.3936%" y="319.50"></text></g><g><title>std::__invoke&lt;pi_lambert_lfts()::{lambda(auto:1)#1}&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;&amp;&gt; (1 samples, 0.28%)</title><rect x="4.1436%" y="293" width="0.2762%" height="15" fill="rgb(247,18,42)"/><text x="4.3936%" y="303.50"></text></g><g><title>std::__invoke_impl&lt;LFT, pi_lambert_lfts()::{lambda(auto:1)#1}&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;&amp;&gt; (1 samples, 0.28%)</title><rect x="4.1436%" y="277" width="0.2762%" height="15" fill="rgb(241,131,45)"/><text x="4.3936%" y="287.50"></text></g><g><title>pi_lambert_lfts (1 samples, 0.28%)</title><rect x="4.1436%" y="261" width="0.2762%" height="15" fill="rgb(249,31,29)"/><text x="4.3936%" y="271.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (1 samples, 0.28%)</title><rect x="4.1436%" y="245" width="0.2762%" height="15" fill="rgb(225,111,53)"/><text x="4.3936%" y="255.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::cpp_int_backend (1 samples, 0.28%)</title><rect x="4.1436%" y="229" width="0.2762%" height="15" fill="rgb(238,160,17)"/><text x="4.3936%" y="239.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (1 samples, 0.28%)</title><rect x="4.1436%" y="213" width="0.2762%" height="15" fill="rgb(214,148,48)"/><text x="4.3936%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 2.21%)</title><rect x="4.4199%" y="245" width="2.2099%" height="15" fill="rgb(232,36,49)"/><text x="4.6699%" y="255.50">_..</text></g><g><title>LFT::LFT (18 samples, 4.97%)</title><rect x="4.4199%" y="325" width="4.9724%" height="15" fill="rgb(209,103,24)"/><text x="4.6699%" y="335.50">LFT::L..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number (18 samples, 4.97%)</title><rect x="4.4199%" y="309" width="4.9724%" height="15" fill="rgb(229,88,8)"/><text x="4.6699%" y="319.50">boost:..</text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::cpp_int_backend (18 samples, 4.97%)</title><rect x="4.4199%" y="293" width="4.9724%" height="15" fill="rgb(213,181,19)"/><text x="4.6699%" y="303.50">boost:..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (18 samples, 4.97%)</title><rect x="4.4199%" y="277" width="4.9724%" height="15" fill="rgb(254,191,54)"/><text x="4.6699%" y="287.50">boost:..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (18 samples, 4.97%)</title><rect x="4.4199%" y="261" width="4.9724%" height="15" fill="rgb(241,83,37)"/><text x="4.6699%" y="271.50">boost:..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (10 samples, 2.76%)</title><rect x="6.6298%" y="245" width="2.7624%" height="15" fill="rgb(233,36,39)"/><text x="6.8798%" y="255.50">bo..</text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (10 samples, 2.76%)</title><rect x="6.6298%" y="229" width="2.7624%" height="15" fill="rgb(226,3,54)"/><text x="6.8798%" y="239.50">st..</text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (10 samples, 2.76%)</title><rect x="6.6298%" y="213" width="2.7624%" height="15" fill="rgb(245,192,40)"/><text x="6.8798%" y="223.50">__..</text></g><g><title>operator new (10 samples, 2.76%)</title><rect x="6.6298%" y="197" width="2.7624%" height="15" fill="rgb(238,167,29)"/><text x="6.8798%" y="207.50">op..</text></g><g><title>__GI___libc_malloc (10 samples, 2.76%)</title><rect x="6.6298%" y="181" width="2.7624%" height="15" fill="rgb(232,182,51)"/><text x="6.8798%" y="191.50">__..</text></g><g><title>_int_malloc (10 samples, 2.76%)</title><rect x="6.6298%" y="165" width="2.7624%" height="15" fill="rgb(231,60,39)"/><text x="6.8798%" y="175.50">_i..</text></g><g><title>LFT::~LFT (1 samples, 0.28%)</title><rect x="9.3923%" y="325" width="0.2762%" height="15" fill="rgb(208,69,12)"/><text x="9.6423%" y="335.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::~number (1 samples, 0.28%)</title><rect x="9.3923%" y="309" width="0.2762%" height="15" fill="rgb(235,93,37)"/><text x="9.6423%" y="319.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::~cpp_int_backend (1 samples, 0.28%)</title><rect x="9.3923%" y="293" width="0.2762%" height="15" fill="rgb(213,116,39)"/><text x="9.6423%" y="303.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::~cpp_int_base (1 samples, 0.28%)</title><rect x="9.3923%" y="277" width="0.2762%" height="15" fill="rgb(222,207,29)"/><text x="9.6423%" y="287.50"></text></g><g><title>Rational::~Rational (6 samples, 1.66%)</title><rect x="9.6685%" y="325" width="1.6575%" height="15" fill="rgb(206,96,30)"/><text x="9.9185%" y="335.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::~number (6 samples, 1.66%)</title><rect x="9.6685%" y="309" width="1.6575%" height="15" fill="rgb(218,138,4)"/><text x="9.9185%" y="319.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::~cpp_int_backend (6 samples, 1.66%)</title><rect x="9.6685%" y="293" width="1.6575%" height="15" fill="rgb(250,191,14)"/><text x="9.9185%" y="303.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::~cpp_int_base (6 samples, 1.66%)</title><rect x="9.6685%" y="277" width="1.6575%" height="15" fill="rgb(239,60,40)"/><text x="9.9185%" y="287.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::~cpp_int_base (4 samples, 1.10%)</title><rect x="10.2210%" y="261" width="1.1050%" height="15" fill="rgb(206,27,48)"/><text x="10.4710%" y="271.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (4 samples, 1.10%)</title><rect x="10.2210%" y="245" width="1.1050%" height="15" fill="rgb(225,35,8)"/><text x="10.4710%" y="255.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (4 samples, 1.10%)</title><rect x="10.2210%" y="229" width="1.1050%" height="15" fill="rgb(250,213,24)"/><text x="10.4710%" y="239.50"></text></g><g><title>__GI___libc_free (4 samples, 1.10%)</title><rect x="10.2210%" y="213" width="1.1050%" height="15" fill="rgb(247,123,22)"/><text x="10.4710%" y="223.50"></text></g><g><title>_int_free (4 samples, 1.10%)</title><rect x="10.2210%" y="197" width="1.1050%" height="15" fill="rgb(231,138,38)"/><text x="10.4710%" y="207.50"></text></g><g><title>__GI___libc_free (2 samples, 0.55%)</title><rect x="11.3260%" y="325" width="0.5525%" height="15" fill="rgb(231,145,46)"/><text x="11.5760%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.55%)</title><rect x="11.3260%" y="309" width="0.5525%" height="15" fill="rgb(251,118,11)"/><text x="11.5760%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.55%)</title><rect x="11.8785%" y="325" width="0.5525%" height="15" fill="rgb(217,147,25)"/><text x="12.1285%" y="335.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (26 samples, 7.18%)</title><rect x="12.4309%" y="261" width="7.1823%" height="15" fill="rgb(247,81,37)"/><text x="12.6809%" y="271.50">boost::mul..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (26 samples, 7.18%)</title><rect x="12.4309%" y="245" width="7.1823%" height="15" fill="rgb(209,12,38)"/><text x="12.6809%" y="255.50">boost::mul..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (6 samples, 1.66%)</title><rect x="17.9558%" y="229" width="1.6575%" height="15" fill="rgb(227,1,9)"/><text x="18.2058%" y="239.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (6 samples, 1.66%)</title><rect x="17.9558%" y="213" width="1.6575%" height="15" fill="rgb(248,47,43)"/><text x="18.2058%" y="223.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (6 samples, 1.66%)</title><rect x="17.9558%" y="197" width="1.6575%" height="15" fill="rgb(221,10,30)"/><text x="18.2058%" y="207.50"></text></g><g><title>operator new (6 samples, 1.66%)</title><rect x="17.9558%" y="181" width="1.6575%" height="15" fill="rgb(210,229,1)"/><text x="18.2058%" y="191.50"></text></g><g><title>__GI___libc_malloc (6 samples, 1.66%)</title><rect x="17.9558%" y="165" width="1.6575%" height="15" fill="rgb(222,148,37)"/><text x="18.2058%" y="175.50"></text></g><g><title>_int_malloc (6 samples, 1.66%)</title><rect x="17.9558%" y="149" width="1.6575%" height="15" fill="rgb(234,67,33)"/><text x="18.2058%" y="159.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (7 samples, 1.93%)</title><rect x="19.6133%" y="197" width="1.9337%" height="15" fill="rgb(247,98,35)"/><text x="19.8633%" y="207.50">b..</text></g><g><title>boost::multiprecision::detail::addcarry_limb (7 samples, 1.93%)</title><rect x="19.6133%" y="181" width="1.9337%" height="15" fill="rgb(247,138,52)"/><text x="19.8633%" y="191.50">b..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (12 samples, 3.31%)</title><rect x="19.6133%" y="245" width="3.3149%" height="15" fill="rgb(213,79,30)"/><text x="19.8633%" y="255.50">boo..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (12 samples, 3.31%)</title><rect x="19.6133%" y="229" width="3.3149%" height="15" fill="rgb(246,177,23)"/><text x="19.8633%" y="239.50">boo..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (12 samples, 3.31%)</title><rect x="19.6133%" y="213" width="3.3149%" height="15" fill="rgb(230,62,27)"/><text x="19.8633%" y="223.50">boo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (5 samples, 1.38%)</title><rect x="21.5470%" y="197" width="1.3812%" height="15" fill="rgb(216,154,8)"/><text x="21.7970%" y="207.50"></text></g><g><title>boost::multiprecision::detail::subborrow_limb (2 samples, 0.55%)</title><rect x="22.3757%" y="181" width="0.5525%" height="15" fill="rgb(244,35,45)"/><text x="22.6257%" y="191.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="245" width="4.4199%" height="15" fill="rgb(251,115,12)"/><text x="23.1782%" y="255.50">boost..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="229" width="4.4199%" height="15" fill="rgb(240,54,50)"/><text x="23.1782%" y="239.50">boost..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="213" width="4.4199%" height="15" fill="rgb(233,84,52)"/><text x="23.1782%" y="223.50">boost..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="197" width="4.4199%" height="15" fill="rgb(207,117,47)"/><text x="23.1782%" y="207.50">boost..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="181" width="4.4199%" height="15" fill="rgb(249,43,39)"/><text x="23.1782%" y="191.50">boost..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply_default&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long&gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="165" width="4.4199%" height="15" fill="rgb(209,38,44)"/><text x="23.1782%" y="175.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="149" width="4.4199%" height="15" fill="rgb(236,212,23)"/><text x="23.1782%" y="159.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (16 samples, 4.42%)</title><rect x="22.9282%" y="133" width="4.4199%" height="15" fill="rgb(242,79,21)"/><text x="23.1782%" y="143.50">boost..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (2 samples, 0.55%)</title><rect x="26.7956%" y="117" width="0.5525%" height="15" fill="rgb(211,96,35)"/><text x="27.0456%" y="127.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="27.0718%" y="101" width="0.2762%" height="15" fill="rgb(253,215,40)"/><text x="27.3218%" y="111.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="27.0718%" y="85" width="0.2762%" height="15" fill="rgb(211,81,21)"/><text x="27.3218%" y="95.50"></text></g><g><title>operator new (1 samples, 0.28%)</title><rect x="27.0718%" y="69" width="0.2762%" height="15" fill="rgb(208,190,38)"/><text x="27.3218%" y="79.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="27.0718%" y="53" width="0.2762%" height="15" fill="rgb(235,213,38)"/><text x="27.3218%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="27.0718%" y="37" width="0.2762%" height="15" fill="rgb(237,122,38)"/><text x="27.3218%" y="47.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::multiply_immediates&gt; (29 samples, 8.01%)</title><rect x="19.6133%" y="261" width="8.0110%" height="15" fill="rgb(244,218,35)"/><text x="19.8633%" y="271.50">boost::mult..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::~number (1 samples, 0.28%)</title><rect x="27.3481%" y="245" width="0.2762%" height="15" fill="rgb(240,68,47)"/><text x="27.5981%" y="255.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::~cpp_int_backend (1 samples, 0.28%)</title><rect x="27.3481%" y="229" width="0.2762%" height="15" fill="rgb(210,16,53)"/><text x="27.5981%" y="239.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="27.3481%" y="213" width="0.2762%" height="15" fill="rgb(235,124,12)"/><text x="27.5981%" y="223.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (2 samples, 0.55%)</title><rect x="27.6243%" y="197" width="0.5525%" height="15" fill="rgb(224,169,11)"/><text x="27.8743%" y="207.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (2 samples, 0.55%)</title><rect x="27.6243%" y="181" width="0.5525%" height="15" fill="rgb(250,166,2)"/><text x="27.8743%" y="191.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (1 samples, 0.28%)</title><rect x="27.9006%" y="165" width="0.2762%" height="15" fill="rgb(242,216,29)"/><text x="28.1506%" y="175.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; &gt; (3 samples, 0.83%)</title><rect x="27.6243%" y="245" width="0.8287%" height="15" fill="rgb(230,116,27)"/><text x="27.8743%" y="255.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long&gt; (3 samples, 0.83%)</title><rect x="27.6243%" y="229" width="0.8287%" height="15" fill="rgb(228,99,48)"/><text x="27.8743%" y="239.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long, long long&gt; (3 samples, 0.83%)</title><rect x="27.6243%" y="213" width="0.8287%" height="15" fill="rgb(253,11,6)"/><text x="27.8743%" y="223.50"></text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="28.1768%" y="197" width="0.2762%" height="15" fill="rgb(247,143,39)"/><text x="28.4268%" y="207.50"></text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="28.1768%" y="181" width="0.2762%" height="15" fill="rgb(236,97,10)"/><text x="28.4268%" y="191.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (59 samples, 16.30%)</title><rect x="12.4309%" y="325" width="16.2983%" height="15" fill="rgb(233,208,19)"/><text x="12.6809%" y="335.50">boost::multiprecision::nu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (59 samples, 16.30%)</title><rect x="12.4309%" y="309" width="16.2983%" height="15" fill="rgb(216,164,2)"/><text x="12.6809%" y="319.50">boost::multiprecision::nu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (59 samples, 16.30%)</title><rect x="12.4309%" y="293" width="16.2983%" height="15" fill="rgb(220,129,5)"/><text x="12.6809%" y="303.50">boost::multiprecision::nu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; &gt; (59 samples, 16.30%)</title><rect x="12.4309%" y="277" width="16.2983%" height="15" fill="rgb(242,17,10)"/><text x="12.6809%" y="287.50">boost::multiprecision::nu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt; &gt; (4 samples, 1.10%)</title><rect x="27.6243%" y="261" width="1.1050%" height="15" fill="rgb(242,107,0)"/><text x="27.8743%" y="271.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_multiplies&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, boost::multiprecision::detail::multiply_subtract&gt; (1 samples, 0.28%)</title><rect x="28.4530%" y="245" width="0.2762%" height="15" fill="rgb(251,28,31)"/><text x="28.7030%" y="255.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; (1 samples, 0.28%)</title><rect x="28.4530%" y="229" width="0.2762%" height="15" fill="rgb(233,223,10)"/><text x="28.7030%" y="239.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; (1 samples, 0.28%)</title><rect x="28.4530%" y="213" width="0.2762%" height="15" fill="rgb(215,21,27)"/><text x="28.7030%" y="223.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; (1 samples, 0.28%)</title><rect x="28.4530%" y="197" width="0.2762%" height="15" fill="rgb(232,23,21)"/><text x="28.7030%" y="207.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; &gt; (1 samples, 0.28%)</title><rect x="28.4530%" y="181" width="0.2762%" height="15" fill="rgb(244,5,23)"/><text x="28.7030%" y="191.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::canonical_value (1 samples, 0.28%)</title><rect x="28.4530%" y="165" width="0.2762%" height="15" fill="rgb(226,81,46)"/><text x="28.7030%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.55%)</title><rect x="37.0166%" y="213" width="0.5525%" height="15" fill="rgb(247,70,30)"/><text x="37.2666%" y="223.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="37.5691%" y="213" width="0.8287%" height="15" fill="rgb(212,68,19)"/><text x="37.8191%" y="223.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="37.5691%" y="197" width="0.8287%" height="15" fill="rgb(240,187,13)"/><text x="37.8191%" y="207.50"></text></g><g><title>operator new (3 samples, 0.83%)</title><rect x="37.5691%" y="181" width="0.8287%" height="15" fill="rgb(223,113,26)"/><text x="37.8191%" y="191.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.83%)</title><rect x="37.5691%" y="165" width="0.8287%" height="15" fill="rgb(206,192,2)"/><text x="37.8191%" y="175.50"></text></g><g><title>_int_malloc (2 samples, 0.55%)</title><rect x="37.8453%" y="149" width="0.5525%" height="15" fill="rgb(241,108,4)"/><text x="38.0953%" y="159.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (36 samples, 9.94%)</title><rect x="28.7293%" y="261" width="9.9448%" height="15" fill="rgb(247,173,49)"/><text x="28.9793%" y="271.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (36 samples, 9.94%)</title><rect x="28.7293%" y="245" width="9.9448%" height="15" fill="rgb(224,114,35)"/><text x="28.9793%" y="255.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (6 samples, 1.66%)</title><rect x="37.0166%" y="229" width="1.6575%" height="15" fill="rgb(245,159,27)"/><text x="37.2666%" y="239.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="38.3978%" y="213" width="0.2762%" height="15" fill="rgb(245,172,44)"/><text x="38.6478%" y="223.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="38.3978%" y="197" width="0.2762%" height="15" fill="rgb(236,23,11)"/><text x="38.6478%" y="207.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="38.3978%" y="181" width="0.2762%" height="15" fill="rgb(205,117,38)"/><text x="38.6478%" y="191.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="38.3978%" y="165" width="0.2762%" height="15" fill="rgb(237,72,25)"/><text x="38.6478%" y="175.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (8 samples, 2.21%)</title><rect x="38.6740%" y="213" width="2.2099%" height="15" fill="rgb(244,70,9)"/><text x="38.9240%" y="223.50">b..</text></g><g><title>boost::multiprecision::detail::addcarry_limb (7 samples, 1.93%)</title><rect x="38.9503%" y="197" width="1.9337%" height="15" fill="rgb(217,125,39)"/><text x="39.2003%" y="207.50">b..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (9 samples, 2.49%)</title><rect x="38.6740%" y="261" width="2.4862%" height="15" fill="rgb(235,36,10)"/><text x="38.9240%" y="271.50">bo..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (9 samples, 2.49%)</title><rect x="38.6740%" y="245" width="2.4862%" height="15" fill="rgb(251,123,47)"/><text x="38.9240%" y="255.50">bo..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (9 samples, 2.49%)</title><rect x="38.6740%" y="229" width="2.4862%" height="15" fill="rgb(221,13,13)"/><text x="38.9240%" y="239.50">bo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="40.8840%" y="213" width="0.2762%" height="15" fill="rgb(238,131,9)"/><text x="41.1340%" y="223.50"></text></g><g><title>boost::multiprecision::detail::subborrow_limb (1 samples, 0.28%)</title><rect x="40.8840%" y="197" width="0.2762%" height="15" fill="rgb(211,50,8)"/><text x="41.1340%" y="207.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (46 samples, 12.71%)</title><rect x="28.7293%" y="325" width="12.7072%" height="15" fill="rgb(245,182,24)"/><text x="28.9793%" y="335.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (46 samples, 12.71%)</title><rect x="28.7293%" y="309" width="12.7072%" height="15" fill="rgb(242,14,37)"/><text x="28.9793%" y="319.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (46 samples, 12.71%)</title><rect x="28.7293%" y="293" width="12.7072%" height="15" fill="rgb(246,228,12)"/><text x="28.9793%" y="303.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (46 samples, 12.71%)</title><rect x="28.7293%" y="277" width="12.7072%" height="15" fill="rgb(213,55,15)"/><text x="28.9793%" y="287.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt; &gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="261" width="0.2762%" height="15" fill="rgb(209,9,3)"/><text x="41.4102%" y="271.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; &gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="245" width="0.2762%" height="15" fill="rgb(230,59,30)"/><text x="41.4102%" y="255.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long&gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="229" width="0.2762%" height="15" fill="rgb(209,121,21)"/><text x="41.4102%" y="239.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, long long, long long&gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="213" width="0.2762%" height="15" fill="rgb(220,109,13)"/><text x="41.4102%" y="223.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="197" width="0.2762%" height="15" fill="rgb(232,18,1)"/><text x="41.4102%" y="207.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="41.1602%" y="181" width="0.2762%" height="15" fill="rgb(215,41,42)"/><text x="41.4102%" y="191.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (2 samples, 0.55%)</title><rect x="41.7127%" y="165" width="0.5525%" height="15" fill="rgb(224,123,36)"/><text x="41.9627%" y="175.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="41.7127%" y="149" width="0.5525%" height="15" fill="rgb(240,125,3)"/><text x="41.9627%" y="159.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="41.7127%" y="133" width="0.5525%" height="15" fill="rgb(205,98,50)"/><text x="41.9627%" y="143.50"></text></g><g><title>operator new (2 samples, 0.55%)</title><rect x="41.7127%" y="117" width="0.5525%" height="15" fill="rgb(205,185,37)"/><text x="41.9627%" y="127.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.55%)</title><rect x="41.7127%" y="101" width="0.5525%" height="15" fill="rgb(238,207,15)"/><text x="41.9627%" y="111.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="41.9890%" y="85" width="0.2762%" height="15" fill="rgb(213,199,42)"/><text x="42.2390%" y="95.50"></text></g><g><title>boost::multiprecision::detail::addcarry_limb (5 samples, 1.38%)</title><rect x="42.2652%" y="165" width="1.3812%" height="15" fill="rgb(235,201,11)"/><text x="42.5152%" y="175.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (10 samples, 2.76%)</title><rect x="41.4365%" y="181" width="2.7624%" height="15" fill="rgb(207,46,11)"/><text x="41.6865%" y="191.50">bo..</text></g><g><title>std::copy&lt;unsigned long long const*, unsigned long long*&gt; (2 samples, 0.55%)</title><rect x="43.6464%" y="165" width="0.5525%" height="15" fill="rgb(241,35,35)"/><text x="43.8964%" y="175.50"></text></g><g><title>std::__copy_move_a&lt;false, unsigned long long const*, unsigned long long*&gt; (2 samples, 0.55%)</title><rect x="43.6464%" y="149" width="0.5525%" height="15" fill="rgb(243,32,47)"/><text x="43.8964%" y="159.50"></text></g><g><title>std::__copy_move_a1&lt;false, unsigned long long const*, unsigned long long*&gt; (2 samples, 0.55%)</title><rect x="43.6464%" y="133" width="0.5525%" height="15" fill="rgb(247,202,23)"/><text x="43.8964%" y="143.50"></text></g><g><title>std::__copy_move_a2&lt;false, unsigned long long const*, unsigned long long*&gt; (2 samples, 0.55%)</title><rect x="43.6464%" y="117" width="0.5525%" height="15" fill="rgb(219,102,11)"/><text x="43.8964%" y="127.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;unsigned long long&gt; (2 samples, 0.55%)</title><rect x="43.6464%" y="101" width="0.5525%" height="15" fill="rgb(243,110,44)"/><text x="43.8964%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.55%)</title><rect x="43.6464%" y="85" width="0.5525%" height="15" fill="rgb(222,74,54)"/><text x="43.8964%" y="95.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::normalize (1 samples, 0.28%)</title><rect x="46.1326%" y="165" width="0.2762%" height="15" fill="rgb(216,99,12)"/><text x="46.3826%" y="175.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (22 samples, 6.08%)</title><rect x="41.4365%" y="229" width="6.0773%" height="15" fill="rgb(226,22,26)"/><text x="41.6865%" y="239.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (22 samples, 6.08%)</title><rect x="41.4365%" y="213" width="6.0773%" height="15" fill="rgb(217,163,10)"/><text x="41.6865%" y="223.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (22 samples, 6.08%)</title><rect x="41.4365%" y="197" width="6.0773%" height="15" fill="rgb(213,25,53)"/><text x="41.6865%" y="207.50">boost::m..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (12 samples, 3.31%)</title><rect x="44.1989%" y="181" width="3.3149%" height="15" fill="rgb(252,105,26)"/><text x="44.4489%" y="191.50">boo..</text></g><g><title>boost::multiprecision::detail::subborrow_limb (4 samples, 1.10%)</title><rect x="46.4088%" y="165" width="1.1050%" height="15" fill="rgb(220,39,43)"/><text x="46.6588%" y="175.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 1.10%)</title><rect x="56.3536%" y="133" width="1.1050%" height="15" fill="rgb(229,68,48)"/><text x="56.6036%" y="143.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (4 samples, 1.10%)</title><rect x="56.3536%" y="117" width="1.1050%" height="15" fill="rgb(252,8,32)"/><text x="56.6036%" y="127.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (4 samples, 1.10%)</title><rect x="56.3536%" y="101" width="1.1050%" height="15" fill="rgb(223,20,43)"/><text x="56.6036%" y="111.50"></text></g><g><title>operator new (4 samples, 1.10%)</title><rect x="56.3536%" y="85" width="1.1050%" height="15" fill="rgb(229,81,49)"/><text x="56.6036%" y="95.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.10%)</title><rect x="56.3536%" y="69" width="1.1050%" height="15" fill="rgb(236,28,36)"/><text x="56.6036%" y="79.50"></text></g><g><title>_int_malloc (4 samples, 1.10%)</title><rect x="56.3536%" y="53" width="1.1050%" height="15" fill="rgb(249,185,26)"/><text x="56.6036%" y="63.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::multiply_immediates&gt; (59 samples, 16.30%)</title><rect x="41.4365%" y="245" width="16.2983%" height="15" fill="rgb(249,174,33)"/><text x="41.6865%" y="255.50">boost::multiprecision::nu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (37 samples, 10.22%)</title><rect x="47.5138%" y="229" width="10.2210%" height="15" fill="rgb(233,201,37)"/><text x="47.7638%" y="239.50">boost::multipre..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (37 samples, 10.22%)</title><rect x="47.5138%" y="213" width="10.2210%" height="15" fill="rgb(221,78,26)"/><text x="47.7638%" y="223.50">boost::multipre..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (37 samples, 10.22%)</title><rect x="47.5138%" y="197" width="10.2210%" height="15" fill="rgb(250,127,30)"/><text x="47.7638%" y="207.50">boost::multipre..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (37 samples, 10.22%)</title><rect x="47.5138%" y="181" width="10.2210%" height="15" fill="rgb(230,49,44)"/><text x="47.7638%" y="191.50">boost::multipre..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (37 samples, 10.22%)</title><rect x="47.5138%" y="165" width="10.2210%" height="15" fill="rgb(229,67,23)"/><text x="47.7638%" y="175.50">boost::multipre..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (36 samples, 9.94%)</title><rect x="47.7901%" y="149" width="9.9448%" height="15" fill="rgb(249,83,47)"/><text x="48.0401%" y="159.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::size (1 samples, 0.28%)</title><rect x="57.4586%" y="133" width="0.2762%" height="15" fill="rgb(215,43,3)"/><text x="57.7086%" y="143.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::sign (1 samples, 0.28%)</title><rect x="57.7348%" y="213" width="0.2762%" height="15" fill="rgb(238,154,13)"/><text x="57.9848%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="68.2320%" y="181" width="0.2762%" height="15" fill="rgb(219,56,2)"/><text x="68.4820%" y="191.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (7 samples, 1.93%)</title><rect x="68.5083%" y="181" width="1.9337%" height="15" fill="rgb(233,0,4)"/><text x="68.7583%" y="191.50">s..</text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (7 samples, 1.93%)</title><rect x="68.5083%" y="165" width="1.9337%" height="15" fill="rgb(235,30,7)"/><text x="68.7583%" y="175.50">_..</text></g><g><title>operator new (7 samples, 1.93%)</title><rect x="68.5083%" y="149" width="1.9337%" height="15" fill="rgb(250,79,13)"/><text x="68.7583%" y="159.50">o..</text></g><g><title>__GI___libc_malloc (7 samples, 1.93%)</title><rect x="68.5083%" y="133" width="1.9337%" height="15" fill="rgb(211,146,34)"/><text x="68.7583%" y="143.50">_..</text></g><g><title>_int_malloc (6 samples, 1.66%)</title><rect x="68.7845%" y="117" width="1.6575%" height="15" fill="rgb(228,22,38)"/><text x="69.0345%" y="127.50"></text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.55%)</title><rect x="69.8895%" y="101" width="0.5525%" height="15" fill="rgb(235,168,5)"/><text x="70.1395%" y="111.50"></text></g><g><title>compose (106 samples, 29.28%)</title><rect x="41.4365%" y="325" width="29.2818%" height="15" fill="rgb(221,155,16)"/><text x="41.6865%" y="335.50">compose</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (106 samples, 29.28%)</title><rect x="41.4365%" y="309" width="29.2818%" height="15" fill="rgb(215,215,53)"/><text x="41.6865%" y="319.50">boost::multiprecision::number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (106 samples, 29.28%)</title><rect x="41.4365%" y="293" width="29.2818%" height="15" fill="rgb(223,4,10)"/><text x="41.6865%" y="303.50">boost::multiprecision::number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (106 samples, 29.28%)</title><rect x="41.4365%" y="277" width="29.2818%" height="15" fill="rgb(234,103,6)"/><text x="41.6865%" y="287.50">boost::multiprecision::number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; &gt; (106 samples, 29.28%)</title><rect x="41.4365%" y="261" width="29.2818%" height="15" fill="rgb(227,97,0)"/><text x="41.6865%" y="271.50">boost::multiprecision::number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (47 samples, 12.98%)</title><rect x="57.7348%" y="245" width="12.9834%" height="15" fill="rgb(234,150,53)"/><text x="57.9848%" y="255.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (47 samples, 12.98%)</title><rect x="57.7348%" y="229" width="12.9834%" height="15" fill="rgb(228,201,54)"/><text x="57.9848%" y="239.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (46 samples, 12.71%)</title><rect x="58.0110%" y="213" width="12.7072%" height="15" fill="rgb(222,22,37)"/><text x="58.2610%" y="223.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (10 samples, 2.76%)</title><rect x="67.9558%" y="197" width="2.7624%" height="15" fill="rgb(237,53,32)"/><text x="68.2058%" y="207.50">bo..</text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="70.4420%" y="181" width="0.2762%" height="15" fill="rgb(233,25,53)"/><text x="70.6920%" y="191.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="70.4420%" y="165" width="0.2762%" height="15" fill="rgb(210,40,34)"/><text x="70.6920%" y="175.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="70.4420%" y="149" width="0.2762%" height="15" fill="rgb(241,220,44)"/><text x="70.6920%" y="159.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="70.4420%" y="133" width="0.2762%" height="15" fill="rgb(235,28,35)"/><text x="70.6920%" y="143.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::~cpp_int_backend (2 samples, 0.55%)</title><rect x="70.7182%" y="229" width="0.5525%" height="15" fill="rgb(210,56,17)"/><text x="70.9682%" y="239.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::~cpp_int_base (2 samples, 0.55%)</title><rect x="70.7182%" y="213" width="0.5525%" height="15" fill="rgb(224,130,29)"/><text x="70.9682%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::~cpp_int_base (2 samples, 0.55%)</title><rect x="70.7182%" y="197" width="0.5525%" height="15" fill="rgb(235,212,8)"/><text x="70.9682%" y="207.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (2 samples, 0.55%)</title><rect x="70.7182%" y="181" width="0.5525%" height="15" fill="rgb(223,33,50)"/><text x="70.9682%" y="191.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (2 samples, 0.55%)</title><rect x="70.7182%" y="165" width="0.5525%" height="15" fill="rgb(219,149,13)"/><text x="70.9682%" y="175.50"></text></g><g><title>__GI___libc_free (2 samples, 0.55%)</title><rect x="70.7182%" y="149" width="0.5525%" height="15" fill="rgb(250,156,29)"/><text x="70.9682%" y="159.50"></text></g><g><title>_int_free (2 samples, 0.55%)</title><rect x="70.7182%" y="133" width="0.5525%" height="15" fill="rgb(216,193,19)"/><text x="70.9682%" y="143.50"></text></g><g><title>__udivti3 (2 samples, 0.55%)</title><rect x="76.2431%" y="213" width="0.5525%" height="15" fill="rgb(216,135,14)"/><text x="76.4931%" y="223.50"></text></g><g><title>__udivmodti4 (2 samples, 0.55%)</title><rect x="76.2431%" y="197" width="0.5525%" height="15" fill="rgb(241,47,5)"/><text x="76.4931%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.83%)</title><rect x="76.7956%" y="165" width="0.8287%" height="15" fill="rgb(233,42,35)"/><text x="77.0456%" y="175.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::limbs (1 samples, 0.28%)</title><rect x="77.6243%" y="165" width="0.2762%" height="15" fill="rgb(231,13,6)"/><text x="77.8743%" y="175.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::operator= (7 samples, 1.93%)</title><rect x="76.7956%" y="213" width="1.9337%" height="15" fill="rgb(207,181,40)"/><text x="77.0456%" y="223.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::assign (7 samples, 1.93%)</title><rect x="76.7956%" y="197" width="1.9337%" height="15" fill="rgb(254,173,49)"/><text x="77.0456%" y="207.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::assign (7 samples, 1.93%)</title><rect x="76.7956%" y="181" width="1.9337%" height="15" fill="rgb(221,1,38)"/><text x="77.0456%" y="191.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.83%)</title><rect x="77.9006%" y="165" width="0.8287%" height="15" fill="rgb(206,124,46)"/><text x="78.1506%" y="175.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="77.9006%" y="149" width="0.8287%" height="15" fill="rgb(249,21,11)"/><text x="78.1506%" y="159.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="77.9006%" y="133" width="0.8287%" height="15" fill="rgb(222,201,40)"/><text x="78.1506%" y="143.50"></text></g><g><title>operator new (3 samples, 0.83%)</title><rect x="77.9006%" y="117" width="0.8287%" height="15" fill="rgb(235,61,29)"/><text x="78.1506%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.83%)</title><rect x="77.9006%" y="101" width="0.8287%" height="15" fill="rgb(219,207,3)"/><text x="78.1506%" y="111.50"></text></g><g><title>_int_malloc (3 samples, 0.83%)</title><rect x="77.9006%" y="85" width="0.8287%" height="15" fill="rgb(222,56,46)"/><text x="78.1506%" y="95.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (2 samples, 0.55%)</title><rect x="78.7293%" y="213" width="0.5525%" height="15" fill="rgb(239,76,54)"/><text x="78.9793%" y="223.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="78.7293%" y="197" width="0.5525%" height="15" fill="rgb(231,124,27)"/><text x="78.9793%" y="207.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="78.7293%" y="181" width="0.5525%" height="15" fill="rgb(249,195,6)"/><text x="78.9793%" y="191.50"></text></g><g><title>operator new (2 samples, 0.55%)</title><rect x="78.7293%" y="165" width="0.5525%" height="15" fill="rgb(237,174,47)"/><text x="78.9793%" y="175.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.55%)</title><rect x="78.7293%" y="149" width="0.5525%" height="15" fill="rgb(206,201,31)"/><text x="78.9793%" y="159.50"></text></g><g><title>_int_malloc (2 samples, 0.55%)</title><rect x="78.7293%" y="133" width="0.5525%" height="15" fill="rgb(231,57,52)"/><text x="78.9793%" y="143.50"></text></g><g><title>floor (42 samples, 11.60%)</title><rect x="70.7182%" y="325" width="11.6022%" height="15" fill="rgb(248,177,22)"/><text x="70.9682%" y="335.50">floor</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (42 samples, 11.60%)</title><rect x="70.7182%" y="309" width="11.6022%" height="15" fill="rgb(215,211,37)"/><text x="70.9682%" y="319.50">boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (42 samples, 11.60%)</title><rect x="70.7182%" y="293" width="11.6022%" height="15" fill="rgb(241,128,51)"/><text x="70.9682%" y="303.50">boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (42 samples, 11.60%)</title><rect x="70.7182%" y="277" width="11.6022%" height="15" fill="rgb(227,165,31)"/><text x="70.9682%" y="287.50">boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (42 samples, 11.60%)</title><rect x="70.7182%" y="261" width="11.6022%" height="15" fill="rgb(228,167,24)"/><text x="70.9682%" y="271.50">boost::multipreci..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (42 samples, 11.60%)</title><rect x="70.7182%" y="245" width="11.6022%" height="15" fill="rgb(228,143,12)"/><text x="70.9682%" y="255.50">boost::multipreci..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (40 samples, 11.05%)</title><rect x="71.2707%" y="229" width="11.0497%" height="15" fill="rgb(249,149,8)"/><text x="71.5207%" y="239.50">boost::multiprec..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (11 samples, 3.04%)</title><rect x="79.2818%" y="213" width="3.0387%" height="15" fill="rgb(243,35,44)"/><text x="79.5318%" y="223.50">boo..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (11 samples, 3.04%)</title><rect x="79.2818%" y="197" width="3.0387%" height="15" fill="rgb(246,89,9)"/><text x="79.5318%" y="207.50">boo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (11 samples, 3.04%)</title><rect x="79.2818%" y="181" width="3.0387%" height="15" fill="rgb(233,213,13)"/><text x="79.5318%" y="191.50">boo..</text></g><g><title>boost::multiprecision::detail::subborrow_limb (6 samples, 1.66%)</title><rect x="80.6630%" y="165" width="1.6575%" height="15" fill="rgb(233,141,41)"/><text x="80.9130%" y="175.50"></text></g><g><title>__udivti3 (2 samples, 0.55%)</title><rect x="85.6354%" y="213" width="0.5525%" height="15" fill="rgb(239,167,4)"/><text x="85.8854%" y="223.50"></text></g><g><title>__udivmodti4 (2 samples, 0.55%)</title><rect x="85.6354%" y="197" width="0.5525%" height="15" fill="rgb(209,217,16)"/><text x="85.8854%" y="207.50"></text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="86.1878%" y="213" width="0.2762%" height="15" fill="rgb(219,88,35)"/><text x="86.4378%" y="223.50"></text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="86.1878%" y="197" width="0.2762%" height="15" fill="rgb(220,193,23)"/><text x="86.4378%" y="207.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="86.1878%" y="181" width="0.2762%" height="15" fill="rgb(230,90,52)"/><text x="86.4378%" y="191.50"></text></g><g><title>boost::multiprecision::detail::subborrow_limb (1 samples, 0.28%)</title><rect x="86.1878%" y="165" width="0.2762%" height="15" fill="rgb(252,106,19)"/><text x="86.4378%" y="175.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::normalize (1 samples, 0.28%)</title><rect x="86.4641%" y="165" width="0.2762%" height="15" fill="rgb(206,74,20)"/><text x="86.7141%" y="175.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="309" width="6.3536%" height="15" fill="rgb(230,138,44)"/><text x="82.5704%" y="319.50">boost::m..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="293" width="6.3536%" height="15" fill="rgb(235,182,43)"/><text x="82.5704%" y="303.50">boost::m..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="277" width="6.3536%" height="15" fill="rgb(242,16,51)"/><text x="82.5704%" y="287.50">boost::m..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="261" width="6.3536%" height="15" fill="rgb(248,9,4)"/><text x="82.5704%" y="271.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="245" width="6.3536%" height="15" fill="rgb(210,31,22)"/><text x="82.5704%" y="255.50">boost::m..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (23 samples, 6.35%)</title><rect x="82.3204%" y="229" width="6.3536%" height="15" fill="rgb(239,54,39)"/><text x="82.5704%" y="239.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (8 samples, 2.21%)</title><rect x="86.4641%" y="213" width="2.2099%" height="15" fill="rgb(230,99,41)"/><text x="86.7141%" y="223.50">b..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (8 samples, 2.21%)</title><rect x="86.4641%" y="197" width="2.2099%" height="15" fill="rgb(253,106,12)"/><text x="86.7141%" y="207.50">b..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (8 samples, 2.21%)</title><rect x="86.4641%" y="181" width="2.2099%" height="15" fill="rgb(213,46,41)"/><text x="86.7141%" y="191.50">b..</text></g><g><title>boost::multiprecision::detail::subborrow_limb (7 samples, 1.93%)</title><rect x="86.7403%" y="165" width="1.9337%" height="15" fill="rgb(215,133,35)"/><text x="86.9903%" y="175.50">b..</text></g><g><title>boost::multiprecision::backends::divide_subtract (2 samples, 0.55%)</title><rect x="89.5028%" y="165" width="0.5525%" height="15" fill="rgb(213,28,5)"/><text x="89.7528%" y="175.50"></text></g><g><title>__udivti3 (1 samples, 0.28%)</title><rect x="89.7790%" y="149" width="0.2762%" height="15" fill="rgb(215,77,49)"/><text x="90.0290%" y="159.50"></text></g><g><title>__udivmodti4 (1 samples, 0.28%)</title><rect x="89.7790%" y="133" width="0.2762%" height="15" fill="rgb(248,100,22)"/><text x="90.0290%" y="143.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (15 samples, 4.14%)</title><rect x="90.0552%" y="165" width="4.1436%" height="15" fill="rgb(208,67,9)"/><text x="90.3052%" y="175.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_gcd_lehmer&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::scoped_shared_storage&gt; (23 samples, 6.35%)</title><rect x="88.9503%" y="181" width="6.3536%" height="15" fill="rgb(219,133,21)"/><text x="89.2003%" y="191.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (4 samples, 1.10%)</title><rect x="94.1989%" y="165" width="1.1050%" height="15" fill="rgb(246,46,29)"/><text x="94.4489%" y="175.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (4 samples, 1.10%)</title><rect x="94.1989%" y="149" width="1.1050%" height="15" fill="rgb(246,185,52)"/><text x="94.4489%" y="159.50"></text></g><g><title>boost::multiprecision::detail::subborrow_limb (3 samples, 0.83%)</title><rect x="94.4751%" y="133" width="0.8287%" height="15" fill="rgb(252,136,11)"/><text x="94.7251%" y="143.50"></text></g><g><title>normalize (48 samples, 13.26%)</title><rect x="82.3204%" y="325" width="13.2597%" height="15" fill="rgb(219,138,53)"/><text x="82.5704%" y="335.50">normalize</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="309" width="6.9061%" height="15" fill="rgb(211,51,23)"/><text x="88.9240%" y="319.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="293" width="6.9061%" height="15" fill="rgb(247,221,28)"/><text x="88.9240%" y="303.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="277" width="6.9061%" height="15" fill="rgb(251,222,45)"/><text x="88.9240%" y="287.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="261" width="6.9061%" height="15" fill="rgb(217,162,53)"/><text x="88.9240%" y="271.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign_function&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="245" width="6.9061%" height="15" fill="rgb(229,93,14)"/><text x="88.9240%" y="255.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign_function_2&lt;boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="229" width="6.9061%" height="15" fill="rgb(209,67,49)"/><text x="88.9240%" y="239.50">boost::mu..</text></g><g><title>boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt;::operator (25 samples, 6.91%)</title><rect x="88.6740%" y="213" width="6.9061%" height="15" fill="rgb(213,87,29)"/><text x="88.9240%" y="223.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_gcd&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (25 samples, 6.91%)</title><rect x="88.6740%" y="197" width="6.9061%" height="15" fill="rgb(205,151,52)"/><text x="88.9240%" y="207.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_modulus&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="95.3039%" y="181" width="0.2762%" height="15" fill="rgb(253,215,39)"/><text x="95.5539%" y="191.50"></text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="95.3039%" y="165" width="0.2762%" height="15" fill="rgb(221,220,41)"/><text x="95.5539%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 1.10%)</title><rect x="95.5801%" y="213" width="1.1050%" height="15" fill="rgb(218,133,21)"/><text x="95.8301%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::limbs (1 samples, 0.28%)</title><rect x="96.6851%" y="213" width="0.2762%" height="15" fill="rgb(221,193,43)"/><text x="96.9351%" y="223.50"></text></g><g><title>LFT::LFT (8 samples, 2.21%)</title><rect x="95.5801%" y="293" width="2.2099%" height="15" fill="rgb(240,128,52)"/><text x="95.8301%" y="303.50">L..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::number (8 samples, 2.21%)</title><rect x="95.5801%" y="277" width="2.2099%" height="15" fill="rgb(253,114,12)"/><text x="95.8301%" y="287.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::cpp_int_backend (8 samples, 2.21%)</title><rect x="95.5801%" y="261" width="2.2099%" height="15" fill="rgb(215,223,47)"/><text x="95.8301%" y="271.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (8 samples, 2.21%)</title><rect x="95.5801%" y="245" width="2.2099%" height="15" fill="rgb(248,225,23)"/><text x="95.8301%" y="255.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::cpp_int_base (8 samples, 2.21%)</title><rect x="95.5801%" y="229" width="2.2099%" height="15" fill="rgb(250,108,0)"/><text x="95.8301%" y="239.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.83%)</title><rect x="96.9613%" y="213" width="0.8287%" height="15" fill="rgb(228,208,7)"/><text x="97.2113%" y="223.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="97.2376%" y="197" width="0.5525%" height="15" fill="rgb(244,45,10)"/><text x="97.4876%" y="207.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.55%)</title><rect x="97.2376%" y="181" width="0.5525%" height="15" fill="rgb(207,125,25)"/><text x="97.4876%" y="191.50"></text></g><g><title>operator new (2 samples, 0.55%)</title><rect x="97.2376%" y="165" width="0.5525%" height="15" fill="rgb(210,195,18)"/><text x="97.4876%" y="175.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.55%)</title><rect x="97.2376%" y="149" width="0.5525%" height="15" fill="rgb(249,80,12)"/><text x="97.4876%" y="159.50"></text></g><g><title>_int_malloc (2 samples, 0.55%)</title><rect x="97.2376%" y="133" width="0.5525%" height="15" fill="rgb(221,65,9)"/><text x="97.4876%" y="143.50"></text></g><g><title>pi_lambert (340 samples, 93.92%)</title><rect x="4.4199%" y="357" width="93.9227%" height="15" fill="rgb(235,49,36)"/><text x="4.6699%" y="367.50">pi_lambert</text></g><g><title>pi_lambert (340 samples, 93.92%)</title><rect x="4.4199%" y="341" width="93.9227%" height="15" fill="rgb(225,32,20)"/><text x="4.6699%" y="351.50">pi_lambert</text></g><g><title>std::make_pair&lt;LFT&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (10 samples, 2.76%)</title><rect x="95.5801%" y="325" width="2.7624%" height="15" fill="rgb(215,141,46)"/><text x="95.8301%" y="335.50">st..</text></g><g><title>std::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::pair&lt;LFT&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, true&gt; (10 samples, 2.76%)</title><rect x="95.5801%" y="309" width="2.7624%" height="15" fill="rgb(250,160,47)"/><text x="95.8301%" y="319.50">st..</text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.55%)</title><rect x="97.7901%" y="293" width="0.5525%" height="15" fill="rgb(216,222,40)"/><text x="98.0401%" y="303.50"></text></g><g><title>_Z6streamI3LFTSt4pairIS0_N5boost14multiprecision6numberINS3_8backends15cpp_int_backendILj0ELj0ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0ESaIyEEELNS3_26expression_template_optionE1EEEESC_EN7cppcoro9generatorIT1_EEPFSG_RKT0_EPFbSK_RKSG_EPFSI_SK_SO_EPFSI_SK_RKT_ESI_NSF_IST_EE.actor (344 samples, 95.03%)</title><rect x="4.1436%" y="373" width="95.0276%" height="15" fill="rgb(234,217,39)"/><text x="4.3936%" y="383.50">_Z6streamI3LFTSt4pairIS0_N5boost14multiprecision6numberINS3_8backends15cpp_int_backendILj0ELj0ELNS3_16cpp_integer_typeE1ELNS3_18cpp_int_check_typeE0ESaIyEEELNS..</text></g><g><title>std::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator= (3 samples, 0.83%)</title><rect x="98.3425%" y="357" width="0.8287%" height="15" fill="rgb(207,178,40)"/><text x="98.5925%" y="367.50"></text></g><g><title>LFT::operator= (3 samples, 0.83%)</title><rect x="98.3425%" y="341" width="0.8287%" height="15" fill="rgb(221,136,13)"/><text x="98.5925%" y="351.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator= (3 samples, 0.83%)</title><rect x="98.3425%" y="325" width="0.8287%" height="15" fill="rgb(249,199,10)"/><text x="98.5925%" y="335.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::operator= (3 samples, 0.83%)</title><rect x="98.3425%" y="309" width="0.8287%" height="15" fill="rgb(249,222,13)"/><text x="98.5925%" y="319.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::operator= (3 samples, 0.83%)</title><rect x="98.3425%" y="293" width="0.8287%" height="15" fill="rgb(244,185,38)"/><text x="98.5925%" y="303.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (3 samples, 0.83%)</title><rect x="98.3425%" y="277" width="0.8287%" height="15" fill="rgb(236,202,9)"/><text x="98.5925%" y="287.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (3 samples, 0.83%)</title><rect x="98.3425%" y="261" width="0.8287%" height="15" fill="rgb(250,229,37)"/><text x="98.5925%" y="271.50"></text></g><g><title>__GI___libc_free (3 samples, 0.83%)</title><rect x="98.3425%" y="245" width="0.8287%" height="15" fill="rgb(206,174,23)"/><text x="98.5925%" y="255.50"></text></g><g><title>_int_free (2 samples, 0.55%)</title><rect x="98.6188%" y="229" width="0.5525%" height="15" fill="rgb(211,33,43)"/><text x="98.8688%" y="239.50"></text></g><g><title>__libc_start_main (347 samples, 95.86%)</title><rect x="3.5912%" y="437" width="95.8564%" height="15" fill="rgb(245,58,50)"/><text x="3.8412%" y="447.50">__libc_start_main</text></g><g><title>main (347 samples, 95.86%)</title><rect x="3.5912%" y="421" width="95.8564%" height="15" fill="rgb(244,68,36)"/><text x="3.8412%" y="431.50">main</text></g><g><title>cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator++ (345 samples, 95.30%)</title><rect x="4.1436%" y="405" width="95.3039%" height="15" fill="rgb(232,229,15)"/><text x="4.3936%" y="415.50">cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_..</text></g><g><title>std::__n4861::coroutine_handle&lt;cppcoro::detail::generator_promise&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; &gt;::resume (345 samples, 95.30%)</title><rect x="4.1436%" y="389" width="95.3039%" height="15" fill="rgb(254,30,23)"/><text x="4.3936%" y="399.50">std::__n4861::coroutine_handle&lt;cppcoro::detail::generator_promise&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost..</text></g><g><title>stream&lt;LFT, std::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (1 samples, 0.28%)</title><rect x="99.1713%" y="373" width="0.2762%" height="15" fill="rgb(235,160,14)"/><text x="99.4213%" y="383.50"></text></g><g><title>std::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator= (1 samples, 0.28%)</title><rect x="99.1713%" y="357" width="0.2762%" height="15" fill="rgb(212,155,44)"/><text x="99.4213%" y="367.50"></text></g><g><title>LFT::operator= (1 samples, 0.28%)</title><rect x="99.1713%" y="341" width="0.2762%" height="15" fill="rgb(226,2,50)"/><text x="99.4213%" y="351.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator= (1 samples, 0.28%)</title><rect x="99.1713%" y="325" width="0.2762%" height="15" fill="rgb(234,177,6)"/><text x="99.4213%" y="335.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt; &gt;::operator= (1 samples, 0.28%)</title><rect x="99.1713%" y="309" width="0.2762%" height="15" fill="rgb(217,24,9)"/><text x="99.4213%" y="319.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::allocator&lt;unsigned long long&gt;, false&gt;::operator= (1 samples, 0.28%)</title><rect x="99.1713%" y="293" width="0.2762%" height="15" fill="rgb(220,13,46)"/><text x="99.4213%" y="303.50"></text></g><g><title>std::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="99.1713%" y="277" width="0.2762%" height="15" fill="rgb(239,221,27)"/><text x="99.4213%" y="287.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="99.1713%" y="261" width="0.2762%" height="15" fill="rgb(222,198,25)"/><text x="99.4213%" y="271.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="99.1713%" y="245" width="0.2762%" height="15" fill="rgb(211,99,13)"/><text x="99.4213%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="99.1713%" y="229" width="0.2762%" height="15" fill="rgb(232,111,31)"/><text x="99.4213%" y="239.50"></text></g><g><title>dl_main (1 samples, 0.28%)</title><rect x="99.4475%" y="405" width="0.2762%" height="15" fill="rgb(245,82,37)"/><text x="99.6975%" y="415.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.28%)</title><rect x="99.4475%" y="389" width="0.2762%" height="15" fill="rgb(227,149,46)"/><text x="99.6975%" y="399.50"></text></g><g><title>all (362 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(218,36,50)"/><text x="0.2500%" y="495.50"></text></g><g><title>spigot_gcc (362 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(226,80,48)"/><text x="0.2500%" y="479.50">spigot_gcc</text></g><g><title>_start (354 samples, 97.79%)</title><rect x="2.2099%" y="453" width="97.7901%" height="15" fill="rgb(238,224,15)"/><text x="2.4599%" y="463.50">_start</text></g><g><title>_dl_start (2 samples, 0.55%)</title><rect x="99.4475%" y="437" width="0.5525%" height="15" fill="rgb(241,136,10)"/><text x="99.6975%" y="447.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.55%)</title><rect x="99.4475%" y="421" width="0.5525%" height="15" fill="rgb(208,32,45)"/><text x="99.6975%" y="431.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.28%)</title><rect x="99.7238%" y="405" width="0.2762%" height="15" fill="rgb(207,135,9)"/><text x="99.9738%" y="415.50"></text></g><g><title>update_usable.constprop.0 (1 samples, 0.28%)</title><rect x="99.7238%" y="389" width="0.2762%" height="15" fill="rgb(206,86,44)"/><text x="99.9738%" y="399.50"></text></g></svg></svg>