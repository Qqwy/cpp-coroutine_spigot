<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="533.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="533.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (1 samples, 0.28%)</title><rect x="0.0000%" y="469" width="0.2778%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="479.50"></text></g><g><title>LFT::operator= (1 samples, 0.28%)</title><rect x="0.0000%" y="453" width="0.2778%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="463.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator= (1 samples, 0.28%)</title><rect x="0.0000%" y="437" width="0.2778%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="447.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (1 samples, 0.28%)</title><rect x="0.0000%" y="421" width="0.2778%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="431.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::operator= (1 samples, 0.28%)</title><rect x="0.0000%" y="405" width="0.2778%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="415.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="0.0000%" y="389" width="0.2778%" height="15" fill="rgb(232,128,0)"/><text x="0.2500%" y="399.50"></text></g><g><title>std::__1::__libcpp_deallocate (1 samples, 0.28%)</title><rect x="0.0000%" y="373" width="0.2778%" height="15" fill="rgb(207,160,47)"/><text x="0.2500%" y="383.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (1 samples, 0.28%)</title><rect x="0.0000%" y="357" width="0.2778%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="367.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (1 samples, 0.28%)</title><rect x="0.0000%" y="341" width="0.2778%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="0.2778%" y="453" width="0.2778%" height="15" fill="rgb(220,122,19)"/><text x="0.5278%" y="463.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="0.5556%" y="453" width="0.2778%" height="15" fill="rgb(250,228,42)"/><text x="0.8056%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="0.8333%" y="453" width="0.2778%" height="15" fill="rgb(240,193,28)"/><text x="1.0833%" y="463.50"></text></g><g><title>[[stack]] (4 samples, 1.11%)</title><rect x="0.2778%" y="469" width="1.1111%" height="15" fill="rgb(216,20,37)"/><text x="0.5278%" y="479.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="1.1111%" y="453" width="0.2778%" height="15" fill="rgb(206,188,39)"/><text x="1.3611%" y="463.50"></text></g><g><title>[anon] (1 samples, 0.28%)</title><rect x="1.3889%" y="469" width="0.2778%" height="15" fill="rgb(217,207,13)"/><text x="1.6389%" y="479.50"></text></g><g><title>stream&lt;LFT, std::__1::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (1 samples, 0.28%)</title><rect x="1.3889%" y="453" width="0.2778%" height="15" fill="rgb(231,73,38)"/><text x="1.6389%" y="463.50"></text></g><g><title>cppcoro::detail::generator_iterator&lt;LFT&gt;::operator++ (1 samples, 0.28%)</title><rect x="1.3889%" y="437" width="0.2778%" height="15" fill="rgb(225,20,46)"/><text x="1.6389%" y="447.50"></text></g><g><title>std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume (1 samples, 0.28%)</title><rect x="1.3889%" y="421" width="0.2778%" height="15" fill="rgb(210,31,41)"/><text x="1.6389%" y="431.50"></text></g><g><title>_int_malloc (3 samples, 0.83%)</title><rect x="1.6667%" y="453" width="0.8333%" height="15" fill="rgb(221,200,47)"/><text x="1.9167%" y="463.50"></text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="2.5000%" y="453" width="0.2778%" height="15" fill="rgb(226,26,5)"/><text x="2.7500%" y="463.50"></text></g><g><title>[unknown] (5 samples, 1.39%)</title><rect x="1.6667%" y="469" width="1.3889%" height="15" fill="rgb(249,33,26)"/><text x="1.9167%" y="479.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.28%)</title><rect x="2.7778%" y="453" width="0.2778%" height="15" fill="rgb(235,183,28)"/><text x="3.0278%" y="463.50"></text></g><g><title>_IO_2_1_stderr_ (1 samples, 0.28%)</title><rect x="3.0556%" y="469" width="0.2778%" height="15" fill="rgb(221,5,38)"/><text x="3.3056%" y="479.50"></text></g><g><title>_IO_new_do_write (1 samples, 0.28%)</title><rect x="3.0556%" y="453" width="0.2778%" height="15" fill="rgb(247,18,42)"/><text x="3.3056%" y="463.50"></text></g><g><title>[libc++.so.1.0] (2 samples, 0.56%)</title><rect x="5.0000%" y="357" width="0.5556%" height="15" fill="rgb(241,131,45)"/><text x="5.2500%" y="367.50"></text></g><g><title>__GI__IO_fflush (2 samples, 0.56%)</title><rect x="5.0000%" y="341" width="0.5556%" height="15" fill="rgb(249,31,29)"/><text x="5.2500%" y="351.50"></text></g><g><title>__GI__IO_file_sync (1 samples, 0.28%)</title><rect x="5.2778%" y="325" width="0.2778%" height="15" fill="rgb(225,111,53)"/><text x="5.5278%" y="335.50"></text></g><g><title>_IO_new_do_write (1 samples, 0.28%)</title><rect x="5.2778%" y="309" width="0.2778%" height="15" fill="rgb(238,160,17)"/><text x="5.5278%" y="319.50"></text></g><g><title>new_do_write (1 samples, 0.28%)</title><rect x="5.2778%" y="293" width="0.2778%" height="15" fill="rgb(214,148,48)"/><text x="5.5278%" y="303.50"></text></g><g><title>_IO_new_file_write (1 samples, 0.28%)</title><rect x="5.2778%" y="277" width="0.2778%" height="15" fill="rgb(232,36,49)"/><text x="5.5278%" y="287.50"></text></g><g><title>__GI___libc_write (1 samples, 0.28%)</title><rect x="5.2778%" y="261" width="0.2778%" height="15" fill="rgb(209,103,24)"/><text x="5.5278%" y="271.50"></text></g><g><title>boost::multiprecision::operator&lt;&lt; &lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; (4 samples, 1.11%)</title><rect x="4.7222%" y="421" width="1.1111%" height="15" fill="rgb(229,88,8)"/><text x="4.9722%" y="431.50"></text></g><g><title>std::__1::operator&lt;&lt; &lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt; &gt; (4 samples, 1.11%)</title><rect x="4.7222%" y="405" width="1.1111%" height="15" fill="rgb(213,181,19)"/><text x="4.9722%" y="415.50"></text></g><g><title>std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt; &gt; (4 samples, 1.11%)</title><rect x="4.7222%" y="389" width="1.1111%" height="15" fill="rgb(254,191,54)"/><text x="4.9722%" y="399.50"></text></g><g><title>std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;::sentry::~sentry (4 samples, 1.11%)</title><rect x="4.7222%" y="373" width="1.1111%" height="15" fill="rgb(241,83,37)"/><text x="4.9722%" y="383.50"></text></g><g><title>std::uncaught_exception (1 samples, 0.28%)</title><rect x="5.5556%" y="357" width="0.2778%" height="15" fill="rgb(233,36,39)"/><text x="5.8056%" y="367.50"></text></g><g><title>__cxa_uncaught_exceptions (1 samples, 0.28%)</title><rect x="5.5556%" y="341" width="0.2778%" height="15" fill="rgb(226,3,54)"/><text x="5.8056%" y="351.50"></text></g><g><title>__cxa_get_globals_fast (1 samples, 0.28%)</title><rect x="5.5556%" y="325" width="0.2778%" height="15" fill="rgb(245,192,40)"/><text x="5.8056%" y="335.50"></text></g><g><title>__GI___pthread_once (1 samples, 0.28%)</title><rect x="5.5556%" y="309" width="0.2778%" height="15" fill="rgb(238,167,29)"/><text x="5.8056%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (8 samples, 2.22%)</title><rect x="5.8333%" y="277" width="2.2222%" height="15" fill="rgb(232,182,51)"/><text x="6.0833%" y="287.50">_..</text></g><g><title>LFT (16 samples, 4.44%)</title><rect x="5.8333%" y="341" width="4.4444%" height="15" fill="rgb(231,60,39)"/><text x="6.0833%" y="351.50">LFT</text></g><g><title>number (16 samples, 4.44%)</title><rect x="5.8333%" y="325" width="4.4444%" height="15" fill="rgb(208,69,12)"/><text x="6.0833%" y="335.50">number</text></g><g><title>cpp_int_backend (16 samples, 4.44%)</title><rect x="5.8333%" y="309" width="4.4444%" height="15" fill="rgb(235,93,37)"/><text x="6.0833%" y="319.50">cpp_i..</text></g><g><title>cpp_int_base (16 samples, 4.44%)</title><rect x="5.8333%" y="293" width="4.4444%" height="15" fill="rgb(213,116,39)"/><text x="6.0833%" y="303.50">cpp_i..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (8 samples, 2.22%)</title><rect x="8.0556%" y="277" width="2.2222%" height="15" fill="rgb(222,207,29)"/><text x="8.3056%" y="287.50">b..</text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (8 samples, 2.22%)</title><rect x="8.0556%" y="261" width="2.2222%" height="15" fill="rgb(206,96,30)"/><text x="8.3056%" y="271.50">s..</text></g><g><title>std::__1::__libcpp_allocate (8 samples, 2.22%)</title><rect x="8.0556%" y="245" width="2.2222%" height="15" fill="rgb(218,138,4)"/><text x="8.3056%" y="255.50">s..</text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (8 samples, 2.22%)</title><rect x="8.0556%" y="229" width="2.2222%" height="15" fill="rgb(250,191,14)"/><text x="8.3056%" y="239.50">s..</text></g><g><title>operator new (8 samples, 2.22%)</title><rect x="8.0556%" y="213" width="2.2222%" height="15" fill="rgb(239,60,40)"/><text x="8.3056%" y="223.50">o..</text></g><g><title>__GI___libc_malloc (8 samples, 2.22%)</title><rect x="8.0556%" y="197" width="2.2222%" height="15" fill="rgb(206,27,48)"/><text x="8.3056%" y="207.50">_..</text></g><g><title>_int_malloc (8 samples, 2.22%)</title><rect x="8.0556%" y="181" width="2.2222%" height="15" fill="rgb(225,35,8)"/><text x="8.3056%" y="191.50">_..</text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 1.11%)</title><rect x="10.2778%" y="341" width="1.1111%" height="15" fill="rgb(250,213,24)"/><text x="10.5278%" y="351.50"></text></g><g><title>boost::multiprecision::operator==&lt;boost::multiprecision::detail::modulus_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, int, void, void, int&gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="341" width="0.2778%" height="15" fill="rgb(247,123,22)"/><text x="11.6389%" y="351.50"></text></g><g><title>number&lt;boost::multiprecision::detail::modulus_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, int, void, void&gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="325" width="0.2778%" height="15" fill="rgb(231,138,38)"/><text x="11.6389%" y="335.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::modulus_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, int, void, void&gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="309" width="0.2778%" height="15" fill="rgb(231,145,46)"/><text x="11.6389%" y="319.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::modulus_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, int, void, void&gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="293" width="0.2778%" height="15" fill="rgb(251,118,11)"/><text x="11.6389%" y="303.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::modulus_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, int, void, void&gt; &gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="277" width="0.2778%" height="15" fill="rgb(217,147,25)"/><text x="11.6389%" y="287.50"></text></g><g><title>boost::multiprecision::backends::eval_modulus&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="261" width="0.2778%" height="15" fill="rgb(247,81,37)"/><text x="11.6389%" y="271.50"></text></g><g><title>boost::multiprecision::backends::eval_modulus&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="11.3889%" y="245" width="0.2778%" height="15" fill="rgb(209,12,38)"/><text x="11.6389%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 2.50%)</title><rect x="11.6667%" y="277" width="2.5000%" height="15" fill="rgb(227,1,9)"/><text x="11.9167%" y="287.50">__..</text></g><g><title>number (11 samples, 3.06%)</title><rect x="11.6667%" y="325" width="3.0556%" height="15" fill="rgb(248,47,43)"/><text x="11.9167%" y="335.50">num..</text></g><g><title>cpp_int_backend (11 samples, 3.06%)</title><rect x="11.6667%" y="309" width="3.0556%" height="15" fill="rgb(221,10,30)"/><text x="11.9167%" y="319.50">cpp..</text></g><g><title>cpp_int_base (11 samples, 3.06%)</title><rect x="11.6667%" y="293" width="3.0556%" height="15" fill="rgb(210,229,1)"/><text x="11.9167%" y="303.50">cpp..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (2 samples, 0.56%)</title><rect x="14.1667%" y="277" width="0.5556%" height="15" fill="rgb(222,148,37)"/><text x="14.4167%" y="287.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (2 samples, 0.56%)</title><rect x="14.1667%" y="261" width="0.5556%" height="15" fill="rgb(234,67,33)"/><text x="14.4167%" y="271.50"></text></g><g><title>std::__1::__libcpp_allocate (2 samples, 0.56%)</title><rect x="14.1667%" y="245" width="0.5556%" height="15" fill="rgb(247,98,35)"/><text x="14.4167%" y="255.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (2 samples, 0.56%)</title><rect x="14.1667%" y="229" width="0.5556%" height="15" fill="rgb(247,138,52)"/><text x="14.4167%" y="239.50"></text></g><g><title>operator new (2 samples, 0.56%)</title><rect x="14.1667%" y="213" width="0.5556%" height="15" fill="rgb(213,79,30)"/><text x="14.4167%" y="223.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.56%)</title><rect x="14.1667%" y="197" width="0.5556%" height="15" fill="rgb(246,177,23)"/><text x="14.4167%" y="207.50"></text></g><g><title>_int_malloc (2 samples, 0.56%)</title><rect x="14.1667%" y="181" width="0.5556%" height="15" fill="rgb(230,62,27)"/><text x="14.4167%" y="191.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (1 samples, 0.28%)</title><rect x="16.3889%" y="165" width="0.2778%" height="15" fill="rgb(216,154,8)"/><text x="16.6389%" y="175.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="16.3889%" y="149" width="0.2778%" height="15" fill="rgb(244,35,45)"/><text x="16.6389%" y="159.50"></text></g><g><title>std::__1::__libcpp_allocate (1 samples, 0.28%)</title><rect x="16.3889%" y="133" width="0.2778%" height="15" fill="rgb(251,115,12)"/><text x="16.6389%" y="143.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (1 samples, 0.28%)</title><rect x="16.3889%" y="117" width="0.2778%" height="15" fill="rgb(240,54,50)"/><text x="16.6389%" y="127.50"></text></g><g><title>operator new (1 samples, 0.28%)</title><rect x="16.3889%" y="101" width="0.2778%" height="15" fill="rgb(233,84,52)"/><text x="16.6389%" y="111.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="16.3889%" y="85" width="0.2778%" height="15" fill="rgb(207,117,47)"/><text x="16.6389%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="16.3889%" y="69" width="0.2778%" height="15" fill="rgb(249,43,39)"/><text x="16.6389%" y="79.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (7 samples, 1.94%)</title><rect x="15.0000%" y="197" width="1.9444%" height="15" fill="rgb(209,38,44)"/><text x="15.2500%" y="207.50">b..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (7 samples, 1.94%)</title><rect x="15.0000%" y="181" width="1.9444%" height="15" fill="rgb(236,212,23)"/><text x="15.2500%" y="191.50">b..</text></g><g><title>boost::multiprecision::std_constexpr::copy&lt;unsigned long long const*, unsigned long long*&gt; (1 samples, 0.28%)</title><rect x="16.6667%" y="165" width="0.2778%" height="15" fill="rgb(242,79,21)"/><text x="16.9167%" y="175.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="16.6667%" y="149" width="0.2778%" height="15" fill="rgb(211,96,35)"/><text x="16.9167%" y="159.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (18 samples, 5.00%)</title><rect x="15.0000%" y="245" width="5.0000%" height="15" fill="rgb(253,215,40)"/><text x="15.2500%" y="255.50">boost:..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (18 samples, 5.00%)</title><rect x="15.0000%" y="229" width="5.0000%" height="15" fill="rgb(211,81,21)"/><text x="15.2500%" y="239.50">boost:..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (18 samples, 5.00%)</title><rect x="15.0000%" y="213" width="5.0000%" height="15" fill="rgb(208,190,38)"/><text x="15.2500%" y="223.50">boost:..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (11 samples, 3.06%)</title><rect x="16.9444%" y="197" width="3.0556%" height="15" fill="rgb(235,213,38)"/><text x="17.1944%" y="207.50">boo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (11 samples, 3.06%)</title><rect x="16.9444%" y="181" width="3.0556%" height="15" fill="rgb(237,122,38)"/><text x="17.1944%" y="191.50">boo..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::sign (1 samples, 0.28%)</title><rect x="20.5556%" y="165" width="0.2778%" height="15" fill="rgb(244,218,35)"/><text x="20.8056%" y="175.50"></text></g><g><title>number&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (28 samples, 7.78%)</title><rect x="20.0000%" y="245" width="7.7778%" height="15" fill="rgb(240,68,47)"/><text x="20.2500%" y="255.50">number&lt;boos..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (28 samples, 7.78%)</title><rect x="20.0000%" y="229" width="7.7778%" height="15" fill="rgb(210,16,53)"/><text x="20.2500%" y="239.50">boost::mult..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (28 samples, 7.78%)</title><rect x="20.0000%" y="213" width="7.7778%" height="15" fill="rgb(235,124,12)"/><text x="20.2500%" y="223.50">boost::mult..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (28 samples, 7.78%)</title><rect x="20.0000%" y="197" width="7.7778%" height="15" fill="rgb(224,169,11)"/><text x="20.2500%" y="207.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (28 samples, 7.78%)</title><rect x="20.0000%" y="181" width="7.7778%" height="15" fill="rgb(250,166,2)"/><text x="20.2500%" y="191.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (25 samples, 6.94%)</title><rect x="20.8333%" y="165" width="6.9444%" height="15" fill="rgb(242,216,29)"/><text x="21.0833%" y="175.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 1.11%)</title><rect x="26.6667%" y="149" width="1.1111%" height="15" fill="rgb(230,116,27)"/><text x="26.9167%" y="159.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (4 samples, 1.11%)</title><rect x="26.6667%" y="133" width="1.1111%" height="15" fill="rgb(228,99,48)"/><text x="26.9167%" y="143.50"></text></g><g><title>std::__1::__libcpp_allocate (4 samples, 1.11%)</title><rect x="26.6667%" y="117" width="1.1111%" height="15" fill="rgb(253,11,6)"/><text x="26.9167%" y="127.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (4 samples, 1.11%)</title><rect x="26.6667%" y="101" width="1.1111%" height="15" fill="rgb(247,143,39)"/><text x="26.9167%" y="111.50"></text></g><g><title>operator new (4 samples, 1.11%)</title><rect x="26.6667%" y="85" width="1.1111%" height="15" fill="rgb(236,97,10)"/><text x="26.9167%" y="95.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.11%)</title><rect x="26.6667%" y="69" width="1.1111%" height="15" fill="rgb(233,208,19)"/><text x="26.9167%" y="79.50"></text></g><g><title>_int_malloc (4 samples, 1.11%)</title><rect x="26.6667%" y="53" width="1.1111%" height="15" fill="rgb(216,164,2)"/><text x="26.9167%" y="63.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::multiply_immediates&gt; (47 samples, 13.06%)</title><rect x="15.0000%" y="261" width="13.0556%" height="15" fill="rgb(220,129,5)"/><text x="15.2500%" y="271.50">boost::multiprecisio..</text></g><g><title>~number (1 samples, 0.28%)</title><rect x="27.7778%" y="245" width="0.2778%" height="15" fill="rgb(242,17,10)"/><text x="28.0278%" y="255.50"></text></g><g><title>~cpp_int_base (1 samples, 0.28%)</title><rect x="27.7778%" y="229" width="0.2778%" height="15" fill="rgb(242,107,0)"/><text x="28.0278%" y="239.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="27.7778%" y="213" width="0.2778%" height="15" fill="rgb(251,28,31)"/><text x="28.0278%" y="223.50"></text></g><g><title>std::__1::__libcpp_deallocate (1 samples, 0.28%)</title><rect x="27.7778%" y="197" width="0.2778%" height="15" fill="rgb(233,223,10)"/><text x="28.0278%" y="207.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (1 samples, 0.28%)</title><rect x="27.7778%" y="181" width="0.2778%" height="15" fill="rgb(215,21,27)"/><text x="28.0278%" y="191.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (1 samples, 0.28%)</title><rect x="27.7778%" y="165" width="0.2778%" height="15" fill="rgb(232,23,21)"/><text x="28.0278%" y="175.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="27.7778%" y="149" width="0.2778%" height="15" fill="rgb(244,5,23)"/><text x="28.0278%" y="159.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="27.7778%" y="133" width="0.2778%" height="15" fill="rgb(226,81,46)"/><text x="28.0278%" y="143.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.56%)</title><rect x="35.2778%" y="197" width="0.5556%" height="15" fill="rgb(247,70,30)"/><text x="35.5278%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (4 samples, 1.11%)</title><rect x="35.8333%" y="197" width="1.1111%" height="15" fill="rgb(212,68,19)"/><text x="36.0833%" y="207.50"></text></g><g><title>std::__1::__libcpp_allocate (4 samples, 1.11%)</title><rect x="35.8333%" y="181" width="1.1111%" height="15" fill="rgb(240,187,13)"/><text x="36.0833%" y="191.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (4 samples, 1.11%)</title><rect x="35.8333%" y="165" width="1.1111%" height="15" fill="rgb(223,113,26)"/><text x="36.0833%" y="175.50"></text></g><g><title>operator new (4 samples, 1.11%)</title><rect x="35.8333%" y="149" width="1.1111%" height="15" fill="rgb(206,192,2)"/><text x="36.0833%" y="159.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.11%)</title><rect x="35.8333%" y="133" width="1.1111%" height="15" fill="rgb(241,108,4)"/><text x="36.0833%" y="143.50"></text></g><g><title>_int_malloc (4 samples, 1.11%)</title><rect x="35.8333%" y="117" width="1.1111%" height="15" fill="rgb(247,173,49)"/><text x="36.0833%" y="127.50"></text></g><g><title>number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, void, void&gt; (81 samples, 22.50%)</title><rect x="14.7222%" y="325" width="22.5000%" height="15" fill="rgb(224,114,35)"/><text x="14.9722%" y="335.50">number&lt;boost::multiprecision::detail..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (81 samples, 22.50%)</title><rect x="14.7222%" y="309" width="22.5000%" height="15" fill="rgb(245,159,27)"/><text x="14.9722%" y="319.50">boost::multiprecision::number&lt;boost:..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (81 samples, 22.50%)</title><rect x="14.7222%" y="293" width="22.5000%" height="15" fill="rgb(245,172,44)"/><text x="14.9722%" y="303.50">boost::multiprecision::number&lt;boost:..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; &gt; (81 samples, 22.50%)</title><rect x="14.7222%" y="277" width="22.5000%" height="15" fill="rgb(236,23,11)"/><text x="14.9722%" y="287.50">boost::multiprecision::number&lt;boost:..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (33 samples, 9.17%)</title><rect x="28.0556%" y="261" width="9.1667%" height="15" fill="rgb(205,117,38)"/><text x="28.3056%" y="271.50">boost::multip..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (33 samples, 9.17%)</title><rect x="28.0556%" y="245" width="9.1667%" height="15" fill="rgb(237,72,25)"/><text x="28.3056%" y="255.50">boost::multip..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (32 samples, 8.89%)</title><rect x="28.3333%" y="229" width="8.8889%" height="15" fill="rgb(244,70,9)"/><text x="28.5833%" y="239.50">boost::multip..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (7 samples, 1.94%)</title><rect x="35.2778%" y="213" width="1.9444%" height="15" fill="rgb(217,125,39)"/><text x="35.5278%" y="223.50">b..</text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="36.9444%" y="197" width="0.2778%" height="15" fill="rgb(235,36,10)"/><text x="37.1944%" y="207.50"></text></g><g><title>std::__1::__libcpp_deallocate (1 samples, 0.28%)</title><rect x="36.9444%" y="181" width="0.2778%" height="15" fill="rgb(251,123,47)"/><text x="37.1944%" y="191.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (1 samples, 0.28%)</title><rect x="36.9444%" y="165" width="0.2778%" height="15" fill="rgb(221,13,13)"/><text x="37.1944%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (1 samples, 0.28%)</title><rect x="36.9444%" y="149" width="0.2778%" height="15" fill="rgb(238,131,9)"/><text x="37.1944%" y="159.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="36.9444%" y="133" width="0.2778%" height="15" fill="rgb(211,50,8)"/><text x="37.1944%" y="143.50"></text></g><g><title>comp (93 samples, 25.83%)</title><rect x="11.6667%" y="341" width="25.8333%" height="15" fill="rgb(245,182,24)"/><text x="11.9167%" y="351.50">comp</text></g><g><title>~number (1 samples, 0.28%)</title><rect x="37.2222%" y="325" width="0.2778%" height="15" fill="rgb(242,14,37)"/><text x="37.4722%" y="335.50"></text></g><g><title>~cpp_int_base (1 samples, 0.28%)</title><rect x="37.2222%" y="309" width="0.2778%" height="15" fill="rgb(246,228,12)"/><text x="37.4722%" y="319.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="37.2222%" y="293" width="0.2778%" height="15" fill="rgb(213,55,15)"/><text x="37.4722%" y="303.50"></text></g><g><title>std::__1::__libcpp_deallocate (1 samples, 0.28%)</title><rect x="37.2222%" y="277" width="0.2778%" height="15" fill="rgb(209,9,3)"/><text x="37.4722%" y="287.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (1 samples, 0.28%)</title><rect x="37.2222%" y="261" width="0.2778%" height="15" fill="rgb(230,59,30)"/><text x="37.4722%" y="271.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (1 samples, 0.28%)</title><rect x="37.2222%" y="245" width="0.2778%" height="15" fill="rgb(209,121,21)"/><text x="37.4722%" y="255.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="37.2222%" y="229" width="0.2778%" height="15" fill="rgb(220,109,13)"/><text x="37.4722%" y="239.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="37.2222%" y="213" width="0.2778%" height="15" fill="rgb(232,18,1)"/><text x="37.4722%" y="223.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="42.7778%" y="229" width="0.2778%" height="15" fill="rgb(215,41,42)"/><text x="43.0278%" y="239.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="42.7778%" y="213" width="0.2778%" height="15" fill="rgb(224,123,36)"/><text x="43.0278%" y="223.50"></text></g><g><title>__udivti3 (4 samples, 1.11%)</title><rect x="43.0556%" y="229" width="1.1111%" height="15" fill="rgb(240,125,3)"/><text x="43.3056%" y="239.50"></text></g><g><title>__udivmodti4 (4 samples, 1.11%)</title><rect x="43.0556%" y="213" width="1.1111%" height="15" fill="rgb(205,98,50)"/><text x="43.3056%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="44.1667%" y="229" width="0.2778%" height="15" fill="rgb(205,185,37)"/><text x="44.4167%" y="239.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare_imp&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="44.1667%" y="213" width="0.2778%" height="15" fill="rgb(238,207,15)"/><text x="44.4167%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare_unsigned&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="44.1667%" y="197" width="0.2778%" height="15" fill="rgb(213,199,42)"/><text x="44.4167%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.83%)</title><rect x="44.4444%" y="197" width="0.8333%" height="15" fill="rgb(235,201,11)"/><text x="44.6944%" y="207.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (6 samples, 1.67%)</title><rect x="44.4444%" y="229" width="1.6667%" height="15" fill="rgb(207,46,11)"/><text x="44.6944%" y="239.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::assign (6 samples, 1.67%)</title><rect x="44.4444%" y="213" width="1.6667%" height="15" fill="rgb(241,35,35)"/><text x="44.6944%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.83%)</title><rect x="45.2778%" y="197" width="0.8333%" height="15" fill="rgb(243,32,47)"/><text x="45.5278%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="45.2778%" y="181" width="0.8333%" height="15" fill="rgb(247,202,23)"/><text x="45.5278%" y="191.50"></text></g><g><title>std::__1::__libcpp_allocate (3 samples, 0.83%)</title><rect x="45.2778%" y="165" width="0.8333%" height="15" fill="rgb(219,102,11)"/><text x="45.5278%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (3 samples, 0.83%)</title><rect x="45.2778%" y="149" width="0.8333%" height="15" fill="rgb(243,110,44)"/><text x="45.5278%" y="159.50"></text></g><g><title>operator new (3 samples, 0.83%)</title><rect x="45.2778%" y="133" width="0.8333%" height="15" fill="rgb(222,74,54)"/><text x="45.5278%" y="143.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.83%)</title><rect x="45.2778%" y="117" width="0.8333%" height="15" fill="rgb(216,99,12)"/><text x="45.5278%" y="127.50"></text></g><g><title>_int_malloc (3 samples, 0.83%)</title><rect x="45.2778%" y="101" width="0.8333%" height="15" fill="rgb(226,22,26)"/><text x="45.5278%" y="111.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 1.11%)</title><rect x="46.1111%" y="229" width="1.1111%" height="15" fill="rgb(217,163,10)"/><text x="46.3611%" y="239.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (4 samples, 1.11%)</title><rect x="46.1111%" y="213" width="1.1111%" height="15" fill="rgb(213,25,53)"/><text x="46.3611%" y="223.50"></text></g><g><title>std::__1::__libcpp_allocate (4 samples, 1.11%)</title><rect x="46.1111%" y="197" width="1.1111%" height="15" fill="rgb(252,105,26)"/><text x="46.3611%" y="207.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (4 samples, 1.11%)</title><rect x="46.1111%" y="181" width="1.1111%" height="15" fill="rgb(220,39,43)"/><text x="46.3611%" y="191.50"></text></g><g><title>operator new (4 samples, 1.11%)</title><rect x="46.1111%" y="165" width="1.1111%" height="15" fill="rgb(229,68,48)"/><text x="46.3611%" y="175.50"></text></g><g><title>__GI___libc_malloc (4 samples, 1.11%)</title><rect x="46.1111%" y="149" width="1.1111%" height="15" fill="rgb(252,8,32)"/><text x="46.3611%" y="159.50"></text></g><g><title>_int_malloc (4 samples, 1.11%)</title><rect x="46.1111%" y="133" width="1.1111%" height="15" fill="rgb(223,20,43)"/><text x="46.3611%" y="143.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.28%)</title><rect x="46.9444%" y="117" width="0.2778%" height="15" fill="rgb(229,81,49)"/><text x="47.1944%" y="127.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::size (1 samples, 0.28%)</title><rect x="47.2222%" y="229" width="0.2778%" height="15" fill="rgb(236,28,36)"/><text x="47.4722%" y="239.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (56 samples, 15.56%)</title><rect x="37.5000%" y="309" width="15.5556%" height="15" fill="rgb(249,185,26)"/><text x="37.7500%" y="319.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (56 samples, 15.56%)</title><rect x="37.5000%" y="293" width="15.5556%" height="15" fill="rgb(249,174,33)"/><text x="37.7500%" y="303.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (56 samples, 15.56%)</title><rect x="37.5000%" y="277" width="15.5556%" height="15" fill="rgb(233,201,37)"/><text x="37.7500%" y="287.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (56 samples, 15.56%)</title><rect x="37.5000%" y="261" width="15.5556%" height="15" fill="rgb(221,78,26)"/><text x="37.7500%" y="271.50">boost::multiprecision::b..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (56 samples, 15.56%)</title><rect x="37.5000%" y="245" width="15.5556%" height="15" fill="rgb(250,127,30)"/><text x="37.7500%" y="255.50">boost::multiprecision::b..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (20 samples, 5.56%)</title><rect x="47.5000%" y="229" width="5.5556%" height="15" fill="rgb(230,49,44)"/><text x="47.7500%" y="239.50">boost::..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (20 samples, 5.56%)</title><rect x="47.5000%" y="213" width="5.5556%" height="15" fill="rgb(229,67,23)"/><text x="47.7500%" y="223.50">boost::..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (20 samples, 5.56%)</title><rect x="47.5000%" y="197" width="5.5556%" height="15" fill="rgb(249,83,47)"/><text x="47.7500%" y="207.50">boost::..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (20 samples, 5.56%)</title><rect x="47.5000%" y="181" width="5.5556%" height="15" fill="rgb(215,43,3)"/><text x="47.7500%" y="191.50">boost::..</text></g><g><title>floor (57 samples, 15.83%)</title><rect x="37.5000%" y="341" width="15.8333%" height="15" fill="rgb(238,154,13)"/><text x="37.7500%" y="351.50">floor</text></g><g><title>number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (57 samples, 15.83%)</title><rect x="37.5000%" y="325" width="15.8333%" height="15" fill="rgb(219,56,2)"/><text x="37.7500%" y="335.50">number&lt;boost::multipreci..</text></g><g><title>cpp_int_backend (1 samples, 0.28%)</title><rect x="53.0556%" y="309" width="0.2778%" height="15" fill="rgb(233,0,4)"/><text x="53.3056%" y="319.50"></text></g><g><title>cpp_int_base (1 samples, 0.28%)</title><rect x="53.0556%" y="293" width="0.2778%" height="15" fill="rgb(235,30,7)"/><text x="53.3056%" y="303.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::limbs (1 samples, 0.28%)</title><rect x="55.0000%" y="229" width="0.2778%" height="15" fill="rgb(250,79,13)"/><text x="55.2500%" y="239.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare_unsigned&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="59.7222%" y="165" width="0.2778%" height="15" fill="rgb(211,146,34)"/><text x="59.9722%" y="175.50"></text></g><g><title>number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="325" width="6.9444%" height="15" fill="rgb(228,22,38)"/><text x="53.5833%" y="335.50">number&lt;bo..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="309" width="6.9444%" height="15" fill="rgb(235,168,5)"/><text x="53.5833%" y="319.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="293" width="6.9444%" height="15" fill="rgb(221,155,16)"/><text x="53.5833%" y="303.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="277" width="6.9444%" height="15" fill="rgb(215,215,53)"/><text x="53.5833%" y="287.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="261" width="6.9444%" height="15" fill="rgb(223,4,10)"/><text x="53.5833%" y="271.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (25 samples, 6.94%)</title><rect x="53.3333%" y="245" width="6.9444%" height="15" fill="rgb(234,103,6)"/><text x="53.5833%" y="255.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (18 samples, 5.00%)</title><rect x="55.2778%" y="229" width="5.0000%" height="15" fill="rgb(227,97,0)"/><text x="55.5278%" y="239.50">boost:..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (18 samples, 5.00%)</title><rect x="55.2778%" y="213" width="5.0000%" height="15" fill="rgb(234,150,53)"/><text x="55.5278%" y="223.50">boost:..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (18 samples, 5.00%)</title><rect x="55.2778%" y="197" width="5.0000%" height="15" fill="rgb(228,201,54)"/><text x="55.5278%" y="207.50">boost:..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (18 samples, 5.00%)</title><rect x="55.2778%" y="181" width="5.0000%" height="15" fill="rgb(222,22,37)"/><text x="55.5278%" y="191.50">boost:..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::sign (1 samples, 0.28%)</title><rect x="60.0000%" y="165" width="0.2778%" height="15" fill="rgb(237,53,32)"/><text x="60.2500%" y="175.50"></text></g><g><title>boost::multiprecision::backends::divide_subtract (1 samples, 0.28%)</title><rect x="61.1111%" y="181" width="0.2778%" height="15" fill="rgb(233,25,53)"/><text x="61.3611%" y="191.50"></text></g><g><title>__udivti3 (1 samples, 0.28%)</title><rect x="61.1111%" y="165" width="0.2778%" height="15" fill="rgb(210,40,34)"/><text x="61.3611%" y="175.50"></text></g><g><title>__udivmodti4 (1 samples, 0.28%)</title><rect x="61.1111%" y="149" width="0.2778%" height="15" fill="rgb(241,220,44)"/><text x="61.3611%" y="159.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (13 samples, 3.61%)</title><rect x="61.3889%" y="181" width="3.6111%" height="15" fill="rgb(235,28,35)"/><text x="61.6389%" y="191.50">boos..</text></g><g><title>boost::multiprecision::backends::eval_gcd_lehmer&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::scoped_shared_storage&gt; (22 samples, 6.11%)</title><rect x="60.2778%" y="197" width="6.1111%" height="15" fill="rgb(210,56,17)"/><text x="60.5278%" y="207.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (5 samples, 1.39%)</title><rect x="65.0000%" y="181" width="1.3889%" height="15" fill="rgb(224,130,29)"/><text x="65.2500%" y="191.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (5 samples, 1.39%)</title><rect x="65.0000%" y="165" width="1.3889%" height="15" fill="rgb(235,212,8)"/><text x="65.2500%" y="175.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (5 samples, 1.39%)</title><rect x="65.0000%" y="149" width="1.3889%" height="15" fill="rgb(223,33,50)"/><text x="65.2500%" y="159.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="66.3889%" y="165" width="0.2778%" height="15" fill="rgb(219,149,13)"/><text x="66.6389%" y="175.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare_imp&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="66.3889%" y="149" width="0.2778%" height="15" fill="rgb(250,156,29)"/><text x="66.6389%" y="159.50"></text></g><g><title>normalize (49 samples, 13.61%)</title><rect x="53.3333%" y="341" width="13.6111%" height="15" fill="rgb(216,193,19)"/><text x="53.5833%" y="351.50">normalize</text></g><g><title>number&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void&gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="325" width="6.6667%" height="15" fill="rgb(216,135,14)"/><text x="60.5278%" y="335.50">number&lt;bo..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="309" width="6.6667%" height="15" fill="rgb(241,47,5)"/><text x="60.5278%" y="319.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="293" width="6.6667%" height="15" fill="rgb(233,42,35)"/><text x="60.5278%" y="303.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="277" width="6.6667%" height="15" fill="rgb(231,13,6)"/><text x="60.5278%" y="287.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign_function&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::function, boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="261" width="6.6667%" height="15" fill="rgb(207,181,40)"/><text x="60.5278%" y="271.50">boost::mu..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign_function_2&lt;boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="245" width="6.6667%" height="15" fill="rgb(254,173,49)"/><text x="60.5278%" y="255.50">boost::mu..</text></g><g><title>boost::multiprecision::detail::number_kind_integergcd_funct&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt;::operator (24 samples, 6.67%)</title><rect x="60.2778%" y="229" width="6.6667%" height="15" fill="rgb(221,1,38)"/><text x="60.5278%" y="239.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_gcd&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (24 samples, 6.67%)</title><rect x="60.2778%" y="213" width="6.6667%" height="15" fill="rgb(206,124,46)"/><text x="60.5278%" y="223.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::eval_modulus&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (2 samples, 0.56%)</title><rect x="66.3889%" y="197" width="0.5556%" height="15" fill="rgb(249,21,11)"/><text x="66.6389%" y="207.50"></text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (2 samples, 0.56%)</title><rect x="66.3889%" y="181" width="0.5556%" height="15" fill="rgb(222,201,40)"/><text x="66.6389%" y="191.50"></text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="66.6667%" y="165" width="0.2778%" height="15" fill="rgb(235,61,29)"/><text x="66.9167%" y="175.50"></text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="66.6667%" y="149" width="0.2778%" height="15" fill="rgb(219,207,3)"/><text x="66.9167%" y="159.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="66.6667%" y="133" width="0.2778%" height="15" fill="rgb(222,56,46)"/><text x="66.9167%" y="143.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (1 samples, 0.28%)</title><rect x="66.6667%" y="117" width="0.2778%" height="15" fill="rgb(239,76,54)"/><text x="66.9167%" y="127.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (13 samples, 3.61%)</title><rect x="67.2222%" y="213" width="3.6111%" height="15" fill="rgb(231,124,27)"/><text x="67.4722%" y="223.50">boos..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (13 samples, 3.61%)</title><rect x="67.2222%" y="197" width="3.6111%" height="15" fill="rgb(249,195,6)"/><text x="67.4722%" y="207.50">boos..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (26 samples, 7.22%)</title><rect x="66.9444%" y="261" width="7.2222%" height="15" fill="rgb(237,174,47)"/><text x="67.1944%" y="271.50">boost::mul..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (26 samples, 7.22%)</title><rect x="66.9444%" y="245" width="7.2222%" height="15" fill="rgb(206,201,31)"/><text x="67.1944%" y="255.50">boost::mul..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (26 samples, 7.22%)</title><rect x="66.9444%" y="229" width="7.2222%" height="15" fill="rgb(231,57,52)"/><text x="67.1944%" y="239.50">boost::mul..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (12 samples, 3.33%)</title><rect x="70.8333%" y="213" width="3.3333%" height="15" fill="rgb(248,177,22)"/><text x="71.0833%" y="223.50">boo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (12 samples, 3.33%)</title><rect x="70.8333%" y="197" width="3.3333%" height="15" fill="rgb(215,211,37)"/><text x="71.0833%" y="207.50">boo..</text></g><g><title>boost::multiprecision::minmax&lt;unsigned int&gt; (1 samples, 0.28%)</title><rect x="73.8889%" y="181" width="0.2778%" height="15" fill="rgb(241,128,51)"/><text x="74.1389%" y="191.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::multiply_immediates&gt; (42 samples, 11.67%)</title><rect x="66.9444%" y="277" width="11.6667%" height="15" fill="rgb(227,165,31)"/><text x="67.1944%" y="287.50">boost::multipreci..</text></g><g><title>number&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="261" width="4.4444%" height="15" fill="rgb(228,167,24)"/><text x="74.4167%" y="271.50">numbe..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="245" width="4.4444%" height="15" fill="rgb(228,143,12)"/><text x="74.4167%" y="255.50">boost..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="229" width="4.4444%" height="15" fill="rgb(249,149,8)"/><text x="74.4167%" y="239.50">boost..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="213" width="4.4444%" height="15" fill="rgb(243,35,44)"/><text x="74.4167%" y="223.50">boost..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, long long, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="197" width="4.4444%" height="15" fill="rgb(246,89,9)"/><text x="74.4167%" y="207.50">boost..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply_default&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, long long&gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="181" width="4.4444%" height="15" fill="rgb(233,213,13)"/><text x="74.4167%" y="191.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="165" width="4.4444%" height="15" fill="rgb(233,141,41)"/><text x="74.4167%" y="175.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (16 samples, 4.44%)</title><rect x="74.1667%" y="149" width="4.4444%" height="15" fill="rgb(239,167,4)"/><text x="74.4167%" y="159.50">boost..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (6 samples, 1.67%)</title><rect x="76.9444%" y="133" width="1.6667%" height="15" fill="rgb(209,217,16)"/><text x="77.1944%" y="143.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (6 samples, 1.67%)</title><rect x="76.9444%" y="117" width="1.6667%" height="15" fill="rgb(219,88,35)"/><text x="77.1944%" y="127.50"></text></g><g><title>std::__1::__libcpp_allocate (6 samples, 1.67%)</title><rect x="76.9444%" y="101" width="1.6667%" height="15" fill="rgb(220,193,23)"/><text x="77.1944%" y="111.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (6 samples, 1.67%)</title><rect x="76.9444%" y="85" width="1.6667%" height="15" fill="rgb(230,90,52)"/><text x="77.1944%" y="95.50"></text></g><g><title>operator new (6 samples, 1.67%)</title><rect x="76.9444%" y="69" width="1.6667%" height="15" fill="rgb(252,106,19)"/><text x="77.1944%" y="79.50"></text></g><g><title>__GI___libc_malloc (6 samples, 1.67%)</title><rect x="76.9444%" y="53" width="1.6667%" height="15" fill="rgb(206,74,20)"/><text x="77.1944%" y="63.50"></text></g><g><title>_int_malloc (6 samples, 1.67%)</title><rect x="76.9444%" y="37" width="1.6667%" height="15" fill="rgb(230,138,44)"/><text x="77.1944%" y="47.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::sign (1 samples, 0.28%)</title><rect x="78.6111%" y="213" width="0.2778%" height="15" fill="rgb(235,182,43)"/><text x="78.8611%" y="223.50"></text></g><g><title>memcpy@plt (1 samples, 0.28%)</title><rect x="81.9444%" y="181" width="0.2778%" height="15" fill="rgb(242,16,51)"/><text x="82.1944%" y="191.50"></text></g><g><title>number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, int&gt; &gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, void, void&gt; (56 samples, 15.56%)</title><rect x="66.9444%" y="341" width="15.5556%" height="15" fill="rgb(248,9,4)"/><text x="67.1944%" y="351.50">number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (56 samples, 15.56%)</title><rect x="66.9444%" y="325" width="15.5556%" height="15" fill="rgb(210,31,22)"/><text x="67.1944%" y="335.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (56 samples, 15.56%)</title><rect x="66.9444%" y="309" width="15.5556%" height="15" fill="rgb(239,54,39)"/><text x="67.1944%" y="319.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, int, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; &gt; (56 samples, 15.56%)</title><rect x="66.9444%" y="293" width="15.5556%" height="15" fill="rgb(230,99,41)"/><text x="67.1944%" y="303.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt; &gt; (14 samples, 3.89%)</title><rect x="78.6111%" y="277" width="3.8889%" height="15" fill="rgb(253,106,12)"/><text x="78.8611%" y="287.50">boos..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_multiplies&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (14 samples, 3.89%)</title><rect x="78.6111%" y="261" width="3.8889%" height="15" fill="rgb(213,46,41)"/><text x="78.8611%" y="271.50">boos..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (14 samples, 3.89%)</title><rect x="78.6111%" y="245" width="3.8889%" height="15" fill="rgb(215,133,35)"/><text x="78.8611%" y="255.50">boos..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (14 samples, 3.89%)</title><rect x="78.6111%" y="229" width="3.8889%" height="15" fill="rgb(213,28,5)"/><text x="78.8611%" y="239.50">boos..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (13 samples, 3.61%)</title><rect x="78.8889%" y="213" width="3.6111%" height="15" fill="rgb(215,77,49)"/><text x="79.1389%" y="223.50">boos..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (2 samples, 0.56%)</title><rect x="81.9444%" y="197" width="0.5556%" height="15" fill="rgb(248,100,22)"/><text x="82.1944%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (1 samples, 0.28%)</title><rect x="82.2222%" y="181" width="0.2778%" height="15" fill="rgb(208,67,9)"/><text x="82.4722%" y="191.50"></text></g><g><title>std::__1::__libcpp_allocate (1 samples, 0.28%)</title><rect x="82.2222%" y="165" width="0.2778%" height="15" fill="rgb(219,133,21)"/><text x="82.4722%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (1 samples, 0.28%)</title><rect x="82.2222%" y="149" width="0.2778%" height="15" fill="rgb(246,46,29)"/><text x="82.4722%" y="159.50"></text></g><g><title>operator new (1 samples, 0.28%)</title><rect x="82.2222%" y="133" width="0.2778%" height="15" fill="rgb(246,185,52)"/><text x="82.4722%" y="143.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.28%)</title><rect x="82.2222%" y="117" width="0.2778%" height="15" fill="rgb(252,136,11)"/><text x="82.4722%" y="127.50"></text></g><g><title>_int_malloc (1 samples, 0.28%)</title><rect x="82.2222%" y="101" width="0.2778%" height="15" fill="rgb(219,138,53)"/><text x="82.4722%" y="111.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (12 samples, 3.33%)</title><rect x="82.7778%" y="229" width="3.3333%" height="15" fill="rgb(211,51,23)"/><text x="83.0278%" y="239.50">boo..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (12 samples, 3.33%)</title><rect x="82.7778%" y="213" width="3.3333%" height="15" fill="rgb(247,221,28)"/><text x="83.0278%" y="223.50">boo..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (15 samples, 4.17%)</title><rect x="82.5000%" y="277" width="4.1667%" height="15" fill="rgb(251,222,45)"/><text x="82.7500%" y="287.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (15 samples, 4.17%)</title><rect x="82.5000%" y="261" width="4.1667%" height="15" fill="rgb(217,162,53)"/><text x="82.7500%" y="271.50">boost..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (15 samples, 4.17%)</title><rect x="82.5000%" y="245" width="4.1667%" height="15" fill="rgb(229,93,14)"/><text x="82.7500%" y="255.50">boost..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (2 samples, 0.56%)</title><rect x="86.1111%" y="229" width="0.5556%" height="15" fill="rgb(209,67,49)"/><text x="86.3611%" y="239.50"></text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (2 samples, 0.56%)</title><rect x="86.1111%" y="213" width="0.5556%" height="15" fill="rgb(213,87,29)"/><text x="86.3611%" y="223.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::compare_unsigned&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="86.3889%" y="197" width="0.2778%" height="15" fill="rgb(205,151,52)"/><text x="86.6389%" y="207.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt; &gt; (1 samples, 0.28%)</title><rect x="86.6667%" y="261" width="0.2778%" height="15" fill="rgb(253,215,39)"/><text x="86.9167%" y="271.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, long long, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, long long&gt; (1 samples, 0.28%)</title><rect x="86.6667%" y="245" width="0.2778%" height="15" fill="rgb(221,220,41)"/><text x="86.9167%" y="255.50"></text></g><g><title>boost::multiprecision::default_ops::eval_multiply_subtract&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, long long, long long&gt; (1 samples, 0.28%)</title><rect x="86.6667%" y="229" width="0.2778%" height="15" fill="rgb(218,133,21)"/><text x="86.9167%" y="239.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="86.6667%" y="213" width="0.2778%" height="15" fill="rgb(221,193,43)"/><text x="86.9167%" y="223.50"></text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (1 samples, 0.28%)</title><rect x="86.6667%" y="197" width="0.2778%" height="15" fill="rgb(240,128,52)"/><text x="86.9167%" y="207.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (5 samples, 1.39%)</title><rect x="93.3333%" y="197" width="1.3889%" height="15" fill="rgb(253,114,12)"/><text x="93.5833%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (5 samples, 1.39%)</title><rect x="93.3333%" y="181" width="1.3889%" height="15" fill="rgb(215,223,47)"/><text x="93.5833%" y="191.50"></text></g><g><title>std::__1::__libcpp_allocate (5 samples, 1.39%)</title><rect x="93.3333%" y="165" width="1.3889%" height="15" fill="rgb(248,225,23)"/><text x="93.5833%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (5 samples, 1.39%)</title><rect x="93.3333%" y="149" width="1.3889%" height="15" fill="rgb(250,108,0)"/><text x="93.5833%" y="159.50"></text></g><g><title>operator new (5 samples, 1.39%)</title><rect x="93.3333%" y="133" width="1.3889%" height="15" fill="rgb(228,208,7)"/><text x="93.5833%" y="143.50"></text></g><g><title>__GI___libc_malloc (5 samples, 1.39%)</title><rect x="93.3333%" y="117" width="1.3889%" height="15" fill="rgb(244,45,10)"/><text x="93.5833%" y="127.50"></text></g><g><title>_int_malloc (5 samples, 1.39%)</title><rect x="93.3333%" y="101" width="1.3889%" height="15" fill="rgb(207,125,25)"/><text x="93.5833%" y="111.50"></text></g><g><title>number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, int&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (45 samples, 12.50%)</title><rect x="82.5000%" y="341" width="12.5000%" height="15" fill="rgb(210,195,18)"/><text x="82.7500%" y="351.50">number&lt;boost::multi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (45 samples, 12.50%)</title><rect x="82.5000%" y="325" width="12.5000%" height="15" fill="rgb(249,80,12)"/><text x="82.7500%" y="335.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (45 samples, 12.50%)</title><rect x="82.5000%" y="309" width="12.5000%" height="15" fill="rgb(221,65,9)"/><text x="82.7500%" y="319.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (45 samples, 12.50%)</title><rect x="82.5000%" y="293" width="12.5000%" height="15" fill="rgb(235,49,36)"/><text x="82.7500%" y="303.50">boost::multiprecisi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiplies, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_subtract, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, int, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, int, void&gt;, void, void&gt; &gt; (30 samples, 8.33%)</title><rect x="86.6667%" y="277" width="8.3333%" height="15" fill="rgb(225,32,20)"/><text x="86.9167%" y="287.50">boost::multi..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_multiplies&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (29 samples, 8.06%)</title><rect x="86.9444%" y="261" width="8.0556%" height="15" fill="rgb(215,141,46)"/><text x="87.1944%" y="271.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (29 samples, 8.06%)</title><rect x="86.9444%" y="245" width="8.0556%" height="15" fill="rgb(250,160,47)"/><text x="87.1944%" y="255.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (29 samples, 8.06%)</title><rect x="86.9444%" y="229" width="8.0556%" height="15" fill="rgb(216,222,40)"/><text x="87.1944%" y="239.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (29 samples, 8.06%)</title><rect x="86.9444%" y="213" width="8.0556%" height="15" fill="rgb(234,217,39)"/><text x="87.1944%" y="223.50">boost::mult..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::sign (1 samples, 0.28%)</title><rect x="94.7222%" y="197" width="0.2778%" height="15" fill="rgb(207,178,40)"/><text x="94.9722%" y="207.50"></text></g><g><title>__memmove_avx_unaligned_erms (6 samples, 1.67%)</title><rect x="95.0000%" y="245" width="1.6667%" height="15" fill="rgb(221,136,13)"/><text x="95.2500%" y="255.50"></text></g><g><title>LFT (9 samples, 2.50%)</title><rect x="95.0000%" y="309" width="2.5000%" height="15" fill="rgb(249,199,10)"/><text x="95.2500%" y="319.50">LFT</text></g><g><title>number (9 samples, 2.50%)</title><rect x="95.0000%" y="293" width="2.5000%" height="15" fill="rgb(249,222,13)"/><text x="95.2500%" y="303.50">nu..</text></g><g><title>cpp_int_backend (9 samples, 2.50%)</title><rect x="95.0000%" y="277" width="2.5000%" height="15" fill="rgb(244,185,38)"/><text x="95.2500%" y="287.50">cp..</text></g><g><title>cpp_int_base (9 samples, 2.50%)</title><rect x="95.0000%" y="261" width="2.5000%" height="15" fill="rgb(236,202,9)"/><text x="95.2500%" y="271.50">cp..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.83%)</title><rect x="96.6667%" y="245" width="0.8333%" height="15" fill="rgb(250,229,37)"/><text x="96.9167%" y="255.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.83%)</title><rect x="96.6667%" y="229" width="0.8333%" height="15" fill="rgb(206,174,23)"/><text x="96.9167%" y="239.50"></text></g><g><title>std::__1::__libcpp_allocate (3 samples, 0.83%)</title><rect x="96.6667%" y="213" width="0.8333%" height="15" fill="rgb(211,33,43)"/><text x="96.9167%" y="223.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (3 samples, 0.83%)</title><rect x="96.6667%" y="197" width="0.8333%" height="15" fill="rgb(245,58,50)"/><text x="96.9167%" y="207.50"></text></g><g><title>operator new (3 samples, 0.83%)</title><rect x="96.6667%" y="181" width="0.8333%" height="15" fill="rgb(244,68,36)"/><text x="96.9167%" y="191.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.83%)</title><rect x="96.6667%" y="165" width="0.8333%" height="15" fill="rgb(232,229,15)"/><text x="96.9167%" y="175.50"></text></g><g><title>_int_malloc (3 samples, 0.83%)</title><rect x="96.6667%" y="149" width="0.8333%" height="15" fill="rgb(254,30,23)"/><text x="96.9167%" y="159.50"></text></g><g><title>std::__1::make_pair&lt;LFT&amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (10 samples, 2.78%)</title><rect x="95.0000%" y="341" width="2.7778%" height="15" fill="rgb(235,160,14)"/><text x="95.2500%" y="351.50">st..</text></g><g><title>pair&lt;LFT &amp;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, false&gt; (10 samples, 2.78%)</title><rect x="95.0000%" y="325" width="2.7778%" height="15" fill="rgb(212,155,44)"/><text x="95.2500%" y="335.50">pa..</text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.28%)</title><rect x="97.5000%" y="309" width="0.2778%" height="15" fill="rgb(226,2,50)"/><text x="97.7500%" y="319.50"></text></g><g><title>~LFT (2 samples, 0.56%)</title><rect x="97.7778%" y="341" width="0.5556%" height="15" fill="rgb(234,177,6)"/><text x="98.0278%" y="351.50"></text></g><g><title>~number (2 samples, 0.56%)</title><rect x="97.7778%" y="325" width="0.5556%" height="15" fill="rgb(217,24,9)"/><text x="98.0278%" y="335.50"></text></g><g><title>~cpp_int_base (2 samples, 0.56%)</title><rect x="97.7778%" y="309" width="0.5556%" height="15" fill="rgb(220,13,46)"/><text x="98.0278%" y="319.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (2 samples, 0.56%)</title><rect x="97.7778%" y="293" width="0.5556%" height="15" fill="rgb(239,221,27)"/><text x="98.0278%" y="303.50"></text></g><g><title>std::__1::__libcpp_deallocate (2 samples, 0.56%)</title><rect x="97.7778%" y="277" width="0.5556%" height="15" fill="rgb(222,198,25)"/><text x="98.0278%" y="287.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (2 samples, 0.56%)</title><rect x="97.7778%" y="261" width="0.5556%" height="15" fill="rgb(211,99,13)"/><text x="98.0278%" y="271.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (2 samples, 0.56%)</title><rect x="97.7778%" y="245" width="0.5556%" height="15" fill="rgb(232,111,31)"/><text x="98.0278%" y="255.50"></text></g><g><title>__GI___libc_free (2 samples, 0.56%)</title><rect x="97.7778%" y="229" width="0.5556%" height="15" fill="rgb(245,82,37)"/><text x="98.0278%" y="239.50"></text></g><g><title>_int_free (2 samples, 0.56%)</title><rect x="97.7778%" y="213" width="0.5556%" height="15" fill="rgb(227,149,46)"/><text x="98.0278%" y="223.50"></text></g><g><title>__invoke (334 samples, 92.78%)</title><rect x="5.8333%" y="373" width="92.7778%" height="15" fill="rgb(218,36,50)"/><text x="6.0833%" y="383.50">__invoke</text></g><g><title>operator (334 samples, 92.78%)</title><rect x="5.8333%" y="357" width="92.7778%" height="15" fill="rgb(226,80,48)"/><text x="6.0833%" y="367.50">operator</text></g><g><title>~Rational (1 samples, 0.28%)</title><rect x="98.3333%" y="341" width="0.2778%" height="15" fill="rgb(238,224,15)"/><text x="98.5833%" y="351.50"></text></g><g><title>~number (1 samples, 0.28%)</title><rect x="98.3333%" y="325" width="0.2778%" height="15" fill="rgb(241,136,10)"/><text x="98.5833%" y="335.50"></text></g><g><title>~cpp_int_base (1 samples, 0.28%)</title><rect x="98.3333%" y="309" width="0.2778%" height="15" fill="rgb(208,32,45)"/><text x="98.5833%" y="319.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (1 samples, 0.28%)</title><rect x="98.3333%" y="293" width="0.2778%" height="15" fill="rgb(207,135,9)"/><text x="98.5833%" y="303.50"></text></g><g><title>std::__1::__libcpp_deallocate (1 samples, 0.28%)</title><rect x="98.3333%" y="277" width="0.2778%" height="15" fill="rgb(206,86,44)"/><text x="98.5833%" y="287.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (1 samples, 0.28%)</title><rect x="98.3333%" y="261" width="0.2778%" height="15" fill="rgb(245,177,15)"/><text x="98.5833%" y="271.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (1 samples, 0.28%)</title><rect x="98.3333%" y="245" width="0.2778%" height="15" fill="rgb(206,64,50)"/><text x="98.5833%" y="255.50"></text></g><g><title>__GI___libc_free (1 samples, 0.28%)</title><rect x="98.3333%" y="229" width="0.2778%" height="15" fill="rgb(234,36,40)"/><text x="98.5833%" y="239.50"></text></g><g><title>_int_free (1 samples, 0.28%)</title><rect x="98.3333%" y="213" width="0.2778%" height="15" fill="rgb(213,64,8)"/><text x="98.5833%" y="223.50"></text></g><g><title>__libc_start_main (341 samples, 94.72%)</title><rect x="4.7222%" y="453" width="94.7222%" height="15" fill="rgb(210,75,36)"/><text x="4.9722%" y="463.50">__libc_start_main</text></g><g><title>main (341 samples, 94.72%)</title><rect x="4.7222%" y="437" width="94.7222%" height="15" fill="rgb(229,88,21)"/><text x="4.9722%" y="447.50">main</text></g><g><title>cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator++ (337 samples, 93.61%)</title><rect x="5.8333%" y="421" width="93.6111%" height="15" fill="rgb(252,204,47)"/><text x="6.0833%" y="431.50">cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integ..</text></g><g><title>std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume (337 samples, 93.61%)</title><rect x="5.8333%" y="405" width="93.6111%" height="15" fill="rgb(208,77,27)"/><text x="6.0833%" y="415.50">std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume</text></g><g><title>stream&lt;LFT, std::__1::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (337 samples, 93.61%)</title><rect x="5.8333%" y="389" width="93.6111%" height="15" fill="rgb(221,76,26)"/><text x="6.0833%" y="399.50">stream&lt;LFT, std::__1::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_t..</text></g><g><title>std::__1::pair&lt;LFT, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator= (3 samples, 0.83%)</title><rect x="98.6111%" y="373" width="0.8333%" height="15" fill="rgb(225,139,18)"/><text x="98.8611%" y="383.50"></text></g><g><title>LFT::operator= (3 samples, 0.83%)</title><rect x="98.6111%" y="357" width="0.8333%" height="15" fill="rgb(230,137,11)"/><text x="98.8611%" y="367.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator= (3 samples, 0.83%)</title><rect x="98.6111%" y="341" width="0.8333%" height="15" fill="rgb(212,28,1)"/><text x="98.8611%" y="351.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (3 samples, 0.83%)</title><rect x="98.6111%" y="325" width="0.8333%" height="15" fill="rgb(248,164,17)"/><text x="98.8611%" y="335.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::operator= (3 samples, 0.83%)</title><rect x="98.6111%" y="309" width="0.8333%" height="15" fill="rgb(222,171,42)"/><text x="98.8611%" y="319.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (2 samples, 0.56%)</title><rect x="98.8889%" y="293" width="0.5556%" height="15" fill="rgb(243,84,45)"/><text x="99.1389%" y="303.50"></text></g><g><title>std::__1::__libcpp_deallocate (2 samples, 0.56%)</title><rect x="98.8889%" y="277" width="0.5556%" height="15" fill="rgb(252,49,23)"/><text x="99.1389%" y="287.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (2 samples, 0.56%)</title><rect x="98.8889%" y="261" width="0.5556%" height="15" fill="rgb(215,19,7)"/><text x="99.1389%" y="271.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (2 samples, 0.56%)</title><rect x="98.8889%" y="245" width="0.5556%" height="15" fill="rgb(238,81,41)"/><text x="99.1389%" y="255.50"></text></g><g><title>__GI___libc_free (2 samples, 0.56%)</title><rect x="98.8889%" y="229" width="0.5556%" height="15" fill="rgb(210,199,37)"/><text x="99.1389%" y="239.50"></text></g><g><title>_int_free (2 samples, 0.56%)</title><rect x="98.8889%" y="213" width="0.5556%" height="15" fill="rgb(244,192,49)"/><text x="99.1389%" y="223.50"></text></g><g><title>dl_main (1 samples, 0.28%)</title><rect x="99.4444%" y="421" width="0.2778%" height="15" fill="rgb(226,211,11)"/><text x="99.6944%" y="431.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.28%)</title><rect x="99.4444%" y="405" width="0.2778%" height="15" fill="rgb(236,162,54)"/><text x="99.6944%" y="415.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.28%)</title><rect x="99.4444%" y="389" width="0.2778%" height="15" fill="rgb(220,229,9)"/><text x="99.6944%" y="399.50"></text></g><g><title>do_lookup_x (1 samples, 0.28%)</title><rect x="99.4444%" y="373" width="0.2778%" height="15" fill="rgb(250,87,22)"/><text x="99.6944%" y="383.50"></text></g><g><title>all (360 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(239,43,17)"/><text x="0.2500%" y="511.50"></text></g><g><title>spigot_clang (360 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(231,177,25)"/><text x="0.2500%" y="495.50">spigot_clang</text></g><g><title>_start (348 samples, 96.67%)</title><rect x="3.3333%" y="469" width="96.6667%" height="15" fill="rgb(219,179,1)"/><text x="3.5833%" y="479.50">_start</text></g><g><title>_dl_start (2 samples, 0.56%)</title><rect x="99.4444%" y="453" width="0.5556%" height="15" fill="rgb(238,219,53)"/><text x="99.6944%" y="463.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.56%)</title><rect x="99.4444%" y="437" width="0.5556%" height="15" fill="rgb(232,167,36)"/><text x="99.6944%" y="447.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.28%)</title><rect x="99.7222%" y="421" width="0.2778%" height="15" fill="rgb(244,19,51)"/><text x="99.9722%" y="431.50"></text></g><g><title>update_usable.constprop.0 (1 samples, 0.28%)</title><rect x="99.7222%" y="405" width="0.2778%" height="15" fill="rgb(224,6,22)"/><text x="99.9722%" y="415.50"></text></g></svg></svg>