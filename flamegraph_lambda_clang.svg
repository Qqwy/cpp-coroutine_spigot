<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (3 samples, 0.12%)</title><rect x="0.0000%" y="453" width="0.1161%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="463.50"></text></g><g><title>[[stack]] (5 samples, 0.19%)</title><rect x="0.1161%" y="453" width="0.1934%" height="15" fill="rgb(217,0,24)"/><text x="0.3661%" y="463.50"></text></g><g><title>[unknown] (7 samples, 0.27%)</title><rect x="0.3095%" y="453" width="0.2708%" height="15" fill="rgb(221,193,54)"/><text x="0.5595%" y="463.50"></text></g><g><title>boost::multiprecision::operator&lt;&lt; &lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; (4 samples, 0.15%)</title><rect x="0.8124%" y="405" width="0.1547%" height="15" fill="rgb(248,212,6)"/><text x="1.0624%" y="415.50"></text></g><g><title>systrim.constprop.0 (3 samples, 0.12%)</title><rect x="1.0832%" y="197" width="0.1161%" height="15" fill="rgb(208,68,35)"/><text x="1.3332%" y="207.50"></text></g><g><title>Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator= (7 samples, 0.27%)</title><rect x="0.9671%" y="357" width="0.2708%" height="15" fill="rgb(232,128,0)"/><text x="1.2171%" y="367.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator= (7 samples, 0.27%)</title><rect x="0.9671%" y="341" width="0.2708%" height="15" fill="rgb(207,160,47)"/><text x="1.2171%" y="351.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (7 samples, 0.27%)</title><rect x="0.9671%" y="325" width="0.2708%" height="15" fill="rgb(228,23,34)"/><text x="1.2171%" y="335.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::operator= (7 samples, 0.27%)</title><rect x="0.9671%" y="309" width="0.2708%" height="15" fill="rgb(218,30,26)"/><text x="1.2171%" y="319.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (7 samples, 0.27%)</title><rect x="0.9671%" y="293" width="0.2708%" height="15" fill="rgb(220,122,19)"/><text x="1.2171%" y="303.50"></text></g><g><title>std::__1::__libcpp_deallocate (7 samples, 0.27%)</title><rect x="0.9671%" y="277" width="0.2708%" height="15" fill="rgb(250,228,42)"/><text x="1.2171%" y="287.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (7 samples, 0.27%)</title><rect x="0.9671%" y="261" width="0.2708%" height="15" fill="rgb(240,193,28)"/><text x="1.2171%" y="271.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (7 samples, 0.27%)</title><rect x="0.9671%" y="245" width="0.2708%" height="15" fill="rgb(216,20,37)"/><text x="1.2171%" y="255.50"></text></g><g><title>__GI___libc_free (7 samples, 0.27%)</title><rect x="0.9671%" y="229" width="0.2708%" height="15" fill="rgb(206,188,39)"/><text x="1.2171%" y="239.50"></text></g><g><title>_int_free (7 samples, 0.27%)</title><rect x="0.9671%" y="213" width="0.2708%" height="15" fill="rgb(217,207,13)"/><text x="1.2171%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (24 samples, 0.93%)</title><rect x="1.2379%" y="261" width="0.9284%" height="15" fill="rgb(231,73,38)"/><text x="1.4879%" y="271.50"></text></g><g><title>LFT (29 samples, 1.12%)</title><rect x="1.2379%" y="325" width="1.1219%" height="15" fill="rgb(225,20,46)"/><text x="1.4879%" y="335.50"></text></g><g><title>number (29 samples, 1.12%)</title><rect x="1.2379%" y="309" width="1.1219%" height="15" fill="rgb(210,31,41)"/><text x="1.4879%" y="319.50"></text></g><g><title>cpp_int_backend (29 samples, 1.12%)</title><rect x="1.2379%" y="293" width="1.1219%" height="15" fill="rgb(221,200,47)"/><text x="1.4879%" y="303.50"></text></g><g><title>cpp_int_base (29 samples, 1.12%)</title><rect x="1.2379%" y="277" width="1.1219%" height="15" fill="rgb(226,26,5)"/><text x="1.4879%" y="287.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 0.15%)</title><rect x="2.2050%" y="261" width="0.1547%" height="15" fill="rgb(249,33,26)"/><text x="2.4550%" y="271.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.15%)</title><rect x="5.4545%" y="133" width="0.1547%" height="15" fill="rgb(235,183,28)"/><text x="5.7045%" y="143.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (9 samples, 0.35%)</title><rect x="5.4159%" y="149" width="0.3482%" height="15" fill="rgb(221,5,38)"/><text x="5.6659%" y="159.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (4 samples, 0.15%)</title><rect x="5.6093%" y="133" width="0.1547%" height="15" fill="rgb(247,18,42)"/><text x="5.8593%" y="143.50"></text></g><g><title>std::__1::__libcpp_allocate (4 samples, 0.15%)</title><rect x="5.6093%" y="117" width="0.1547%" height="15" fill="rgb(241,131,45)"/><text x="5.8593%" y="127.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (4 samples, 0.15%)</title><rect x="5.6093%" y="101" width="0.1547%" height="15" fill="rgb(249,31,29)"/><text x="5.8593%" y="111.50"></text></g><g><title>operator new (4 samples, 0.15%)</title><rect x="5.6093%" y="85" width="0.1547%" height="15" fill="rgb(225,111,53)"/><text x="5.8593%" y="95.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.15%)</title><rect x="5.6093%" y="69" width="0.1547%" height="15" fill="rgb(238,160,17)"/><text x="5.8593%" y="79.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="5.6093%" y="53" width="0.1547%" height="15" fill="rgb(214,148,48)"/><text x="5.8593%" y="63.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (137 samples, 5.30%)</title><rect x="2.3985%" y="181" width="5.2998%" height="15" fill="rgb(232,36,49)"/><text x="2.6485%" y="191.50">boost:..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (137 samples, 5.30%)</title><rect x="2.3985%" y="165" width="5.2998%" height="15" fill="rgb(209,103,24)"/><text x="2.6485%" y="175.50">boost:..</text></g><g><title>boost::multiprecision::std_constexpr::copy&lt;unsigned long long const*, unsigned long long*&gt; (49 samples, 1.90%)</title><rect x="5.8027%" y="149" width="1.8956%" height="15" fill="rgb(229,88,8)"/><text x="6.0527%" y="159.50">b..</text></g><g><title>__memmove_avx_unaligned_erms (49 samples, 1.90%)</title><rect x="5.8027%" y="133" width="1.8956%" height="15" fill="rgb(213,181,19)"/><text x="6.0527%" y="143.50">_..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt; &gt; (255 samples, 9.86%)</title><rect x="2.3985%" y="229" width="9.8646%" height="15" fill="rgb(254,191,54)"/><text x="2.6485%" y="239.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (255 samples, 9.86%)</title><rect x="2.3985%" y="213" width="9.8646%" height="15" fill="rgb(241,83,37)"/><text x="2.6485%" y="223.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (255 samples, 9.86%)</title><rect x="2.3985%" y="197" width="9.8646%" height="15" fill="rgb(233,36,39)"/><text x="2.6485%" y="207.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (118 samples, 4.56%)</title><rect x="7.6983%" y="181" width="4.5648%" height="15" fill="rgb(226,3,54)"/><text x="7.9483%" y="191.50">boost..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (118 samples, 4.56%)</title><rect x="7.6983%" y="165" width="4.5648%" height="15" fill="rgb(245,192,40)"/><text x="7.9483%" y="175.50">boost..</text></g><g><title>__memmove_avx_unaligned_erms (44 samples, 1.70%)</title><rect x="24.2553%" y="117" width="1.7021%" height="15" fill="rgb(238,167,29)"/><text x="24.5053%" y="127.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (7 samples, 0.27%)</title><rect x="25.9574%" y="117" width="0.2708%" height="15" fill="rgb(232,182,51)"/><text x="26.2074%" y="127.50"></text></g><g><title>std::__1::__libcpp_allocate (7 samples, 0.27%)</title><rect x="25.9574%" y="101" width="0.2708%" height="15" fill="rgb(231,60,39)"/><text x="26.2074%" y="111.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (7 samples, 0.27%)</title><rect x="25.9574%" y="85" width="0.2708%" height="15" fill="rgb(208,69,12)"/><text x="26.2074%" y="95.50"></text></g><g><title>operator new (7 samples, 0.27%)</title><rect x="25.9574%" y="69" width="0.2708%" height="15" fill="rgb(235,93,37)"/><text x="26.2074%" y="79.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.27%)</title><rect x="25.9574%" y="53" width="0.2708%" height="15" fill="rgb(213,116,39)"/><text x="26.2074%" y="63.50"></text></g><g><title>_int_malloc (7 samples, 0.27%)</title><rect x="25.9574%" y="37" width="0.2708%" height="15" fill="rgb(222,207,29)"/><text x="26.2074%" y="47.50"></text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_add&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::multiply_immediates&gt; (617 samples, 23.87%)</title><rect x="2.3985%" y="245" width="23.8685%" height="15" fill="rgb(206,96,30)"/><text x="2.6485%" y="255.50">boost::multiprecision::number&lt;boost::m..</text></g><g><title>number&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (362 samples, 14.00%)</title><rect x="12.2631%" y="229" width="14.0039%" height="15" fill="rgb(218,138,4)"/><text x="12.5131%" y="239.50">number&lt;boost::multipr..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (362 samples, 14.00%)</title><rect x="12.2631%" y="213" width="14.0039%" height="15" fill="rgb(250,191,14)"/><text x="12.5131%" y="223.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (362 samples, 14.00%)</title><rect x="12.2631%" y="197" width="14.0039%" height="15" fill="rgb(239,60,40)"/><text x="12.5131%" y="207.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (362 samples, 14.00%)</title><rect x="12.2631%" y="181" width="14.0039%" height="15" fill="rgb(206,27,48)"/><text x="12.5131%" y="191.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (362 samples, 14.00%)</title><rect x="12.2631%" y="165" width="14.0039%" height="15" fill="rgb(225,35,8)"/><text x="12.5131%" y="175.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (359 samples, 13.89%)</title><rect x="12.3791%" y="149" width="13.8878%" height="15" fill="rgb(250,213,24)"/><text x="12.6291%" y="159.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (53 samples, 2.05%)</title><rect x="24.2166%" y="133" width="2.0503%" height="15" fill="rgb(247,123,22)"/><text x="24.4666%" y="143.50">b..</text></g><g><title>__memmove_avx_unaligned_erms (32 samples, 1.24%)</title><rect x="38.6460%" y="181" width="1.2379%" height="15" fill="rgb(231,138,38)"/><text x="38.8960%" y="191.50"></text></g><g><title>Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::compose (976 samples, 37.76%)</title><rect x="2.3598%" y="325" width="37.7563%" height="15" fill="rgb(231,145,46)"/><text x="2.6098%" y="335.50">Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecisi..</text></g><g><title>number&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, void, void&gt; (975 samples, 37.72%)</title><rect x="2.3985%" y="309" width="37.7176%" height="15" fill="rgb(251,118,11)"/><text x="2.6485%" y="319.50">number&lt;boost::multiprecision::detail::plus, boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (975 samples, 37.72%)</title><rect x="2.3985%" y="293" width="37.7176%" height="15" fill="rgb(217,147,25)"/><text x="2.6485%" y="303.50">boost::multiprecision::number&lt;boost::multiprecision::backends..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; (975 samples, 37.72%)</title><rect x="2.3985%" y="277" width="37.7176%" height="15" fill="rgb(247,81,37)"/><text x="2.6485%" y="287.50">boost::multiprecision::number&lt;boost::multiprecision::backends..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::plus, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt;, void, void&gt; &gt; (975 samples, 37.72%)</title><rect x="2.3985%" y="261" width="37.7176%" height="15" fill="rgb(209,12,38)"/><text x="2.6485%" y="271.50">boost::multiprecision::number&lt;boost::multiprecision::backends..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (358 samples, 13.85%)</title><rect x="26.2669%" y="245" width="13.8491%" height="15" fill="rgb(227,1,9)"/><text x="26.5169%" y="255.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (358 samples, 13.85%)</title><rect x="26.2669%" y="229" width="13.8491%" height="15" fill="rgb(248,47,43)"/><text x="26.5169%" y="239.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (355 samples, 13.73%)</title><rect x="26.3830%" y="213" width="13.7331%" height="15" fill="rgb(221,10,30)"/><text x="26.6330%" y="223.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (38 samples, 1.47%)</title><rect x="38.6460%" y="197" width="1.4700%" height="15" fill="rgb(210,229,1)"/><text x="38.8960%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (6 samples, 0.23%)</title><rect x="39.8839%" y="181" width="0.2321%" height="15" fill="rgb(222,148,37)"/><text x="40.1339%" y="191.50"></text></g><g><title>std::__1::__libcpp_allocate (6 samples, 0.23%)</title><rect x="39.8839%" y="165" width="0.2321%" height="15" fill="rgb(234,67,33)"/><text x="40.1339%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (6 samples, 0.23%)</title><rect x="39.8839%" y="149" width="0.2321%" height="15" fill="rgb(247,98,35)"/><text x="40.1339%" y="159.50"></text></g><g><title>operator new (6 samples, 0.23%)</title><rect x="39.8839%" y="133" width="0.2321%" height="15" fill="rgb(247,138,52)"/><text x="40.1339%" y="143.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.23%)</title><rect x="39.8839%" y="117" width="0.2321%" height="15" fill="rgb(213,79,30)"/><text x="40.1339%" y="127.50"></text></g><g><title>_int_malloc (6 samples, 0.23%)</title><rect x="39.8839%" y="101" width="0.2321%" height="15" fill="rgb(246,177,23)"/><text x="40.1339%" y="111.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.12%)</title><rect x="44.4487%" y="165" width="0.1161%" height="15" fill="rgb(230,62,27)"/><text x="44.6987%" y="175.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (168 samples, 6.50%)</title><rect x="40.1161%" y="197" width="6.4990%" height="15" fill="rgb(216,154,8)"/><text x="40.3661%" y="207.50">boost::mu..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (168 samples, 6.50%)</title><rect x="40.1161%" y="181" width="6.4990%" height="15" fill="rgb(244,35,45)"/><text x="40.3661%" y="191.50">boost::mu..</text></g><g><title>boost::multiprecision::std_constexpr::copy&lt;unsigned long long const*, unsigned long long*&gt; (53 samples, 2.05%)</title><rect x="44.5648%" y="165" width="2.0503%" height="15" fill="rgb(251,115,12)"/><text x="44.8148%" y="175.50">b..</text></g><g><title>__memmove_avx_unaligned_erms (53 samples, 2.05%)</title><rect x="44.5648%" y="149" width="2.0503%" height="15" fill="rgb(240,54,50)"/><text x="44.8148%" y="159.50">_..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (248 samples, 9.59%)</title><rect x="40.1161%" y="229" width="9.5938%" height="15" fill="rgb(233,84,52)"/><text x="40.3661%" y="239.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (248 samples, 9.59%)</title><rect x="40.1161%" y="213" width="9.5938%" height="15" fill="rgb(207,117,47)"/><text x="40.3661%" y="223.50">boost::multipr..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (79 samples, 3.06%)</title><rect x="46.6538%" y="197" width="3.0561%" height="15" fill="rgb(249,43,39)"/><text x="46.9038%" y="207.50">boo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (79 samples, 3.06%)</title><rect x="46.6538%" y="181" width="3.0561%" height="15" fill="rgb(209,38,44)"/><text x="46.9038%" y="191.50">boo..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (404 samples, 15.63%)</title><rect x="40.1161%" y="293" width="15.6286%" height="15" fill="rgb(236,212,23)"/><text x="40.3661%" y="303.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (404 samples, 15.63%)</title><rect x="40.1161%" y="277" width="15.6286%" height="15" fill="rgb(242,79,21)"/><text x="40.3661%" y="287.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (404 samples, 15.63%)</title><rect x="40.1161%" y="261" width="15.6286%" height="15" fill="rgb(211,96,35)"/><text x="40.3661%" y="271.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply_add&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (404 samples, 15.63%)</title><rect x="40.1161%" y="245" width="15.6286%" height="15" fill="rgb(253,215,40)"/><text x="40.3661%" y="255.50">boost::multiprecision::d..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (156 samples, 6.03%)</title><rect x="49.7099%" y="229" width="6.0348%" height="15" fill="rgb(211,81,21)"/><text x="49.9599%" y="239.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (156 samples, 6.03%)</title><rect x="49.7099%" y="213" width="6.0348%" height="15" fill="rgb(208,190,38)"/><text x="49.9599%" y="223.50">boost::m..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (5 samples, 0.19%)</title><rect x="55.5513%" y="197" width="0.1934%" height="15" fill="rgb(235,213,38)"/><text x="55.8013%" y="207.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (4 samples, 0.15%)</title><rect x="55.5899%" y="181" width="0.1547%" height="15" fill="rgb(237,122,38)"/><text x="55.8399%" y="191.50"></text></g><g><title>std::__1::__libcpp_allocate (4 samples, 0.15%)</title><rect x="55.5899%" y="165" width="0.1547%" height="15" fill="rgb(244,218,35)"/><text x="55.8399%" y="175.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (4 samples, 0.15%)</title><rect x="55.5899%" y="149" width="0.1547%" height="15" fill="rgb(240,68,47)"/><text x="55.8399%" y="159.50"></text></g><g><title>operator new (4 samples, 0.15%)</title><rect x="55.5899%" y="133" width="0.1547%" height="15" fill="rgb(210,16,53)"/><text x="55.8399%" y="143.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.15%)</title><rect x="55.5899%" y="117" width="0.1547%" height="15" fill="rgb(235,124,12)"/><text x="55.8399%" y="127.50"></text></g><g><title>_int_malloc (4 samples, 0.15%)</title><rect x="55.5899%" y="101" width="0.1547%" height="15" fill="rgb(224,169,11)"/><text x="55.8399%" y="111.50"></text></g><g><title>Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator (405 samples, 15.67%)</title><rect x="40.1161%" y="325" width="15.6673%" height="15" fill="rgb(250,166,2)"/><text x="40.3661%" y="335.50">Spigot::LFT&lt;boost::multi..</text></g><g><title>number&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void&gt; (405 samples, 15.67%)</title><rect x="40.1161%" y="309" width="15.6673%" height="15" fill="rgb(242,216,29)"/><text x="40.3661%" y="319.50">number&lt;boost::multipreci..</text></g><g><title>__memmove_avx_unaligned_erms (46 samples, 1.78%)</title><rect x="61.4700%" y="181" width="1.7795%" height="15" fill="rgb(230,116,27)"/><text x="61.7200%" y="191.50">_..</text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (48 samples, 1.86%)</title><rect x="61.4700%" y="213" width="1.8569%" height="15" fill="rgb(228,99,48)"/><text x="61.7200%" y="223.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::assign (48 samples, 1.86%)</title><rect x="61.4700%" y="197" width="1.8569%" height="15" fill="rgb(253,11,6)"/><text x="61.7200%" y="207.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 0.15%)</title><rect x="63.3269%" y="213" width="0.1547%" height="15" fill="rgb(247,143,39)"/><text x="63.5769%" y="223.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.12%)</title><rect x="63.3656%" y="197" width="0.1161%" height="15" fill="rgb(236,97,10)"/><text x="63.6156%" y="207.50"></text></g><g><title>std::__1::__libcpp_allocate (3 samples, 0.12%)</title><rect x="63.3656%" y="181" width="0.1161%" height="15" fill="rgb(233,208,19)"/><text x="63.6156%" y="191.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (3 samples, 0.12%)</title><rect x="63.3656%" y="165" width="0.1161%" height="15" fill="rgb(216,164,2)"/><text x="63.6156%" y="175.50"></text></g><g><title>operator new (3 samples, 0.12%)</title><rect x="63.3656%" y="149" width="0.1161%" height="15" fill="rgb(220,129,5)"/><text x="63.6156%" y="159.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.12%)</title><rect x="63.3656%" y="133" width="0.1161%" height="15" fill="rgb(242,17,10)"/><text x="63.6156%" y="143.50"></text></g><g><title>_int_malloc (3 samples, 0.12%)</title><rect x="63.3656%" y="117" width="0.1161%" height="15" fill="rgb(242,107,0)"/><text x="63.6156%" y="127.50"></text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (145 samples, 5.61%)</title><rect x="63.4816%" y="213" width="5.6093%" height="15" fill="rgb(251,28,31)"/><text x="63.7316%" y="223.50">boost::..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (145 samples, 5.61%)</title><rect x="63.4816%" y="197" width="5.6093%" height="15" fill="rgb(233,223,10)"/><text x="63.7316%" y="207.50">boost::..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (145 samples, 5.61%)</title><rect x="63.4816%" y="181" width="5.6093%" height="15" fill="rgb(215,21,27)"/><text x="63.7316%" y="191.50">boost::..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (145 samples, 5.61%)</title><rect x="63.4816%" y="165" width="5.6093%" height="15" fill="rgb(232,23,21)"/><text x="63.7316%" y="175.50">boost::..</text></g><g><title>Spigot::Rational&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::floor (345 samples, 13.35%)</title><rect x="55.7834%" y="325" width="13.3462%" height="15" fill="rgb(244,5,23)"/><text x="56.0334%" y="335.50">Spigot::Rational&lt;boo..</text></g><g><title>number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="309" width="13.3462%" height="15" fill="rgb(226,81,46)"/><text x="56.0334%" y="319.50">number&lt;boost::multip..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="293" width="13.3462%" height="15" fill="rgb(247,70,30)"/><text x="56.0334%" y="303.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="277" width="13.3462%" height="15" fill="rgb(212,68,19)"/><text x="56.0334%" y="287.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="261" width="13.3462%" height="15" fill="rgb(240,187,13)"/><text x="56.0334%" y="271.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="245" width="13.3462%" height="15" fill="rgb(223,113,26)"/><text x="56.0334%" y="255.50">boost::multiprecisio..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (345 samples, 13.35%)</title><rect x="55.7834%" y="229" width="13.3462%" height="15" fill="rgb(206,192,2)"/><text x="56.0334%" y="239.50">boost::multiprecisio..</text></g><g><title>__memmove_avx_unaligned_erms (17 samples, 0.66%)</title><rect x="69.1296%" y="325" width="0.6576%" height="15" fill="rgb(241,108,4)"/><text x="69.3796%" y="335.50"></text></g><g><title>__GI___libc_free (3 samples, 0.12%)</title><rect x="69.7872%" y="213" width="0.1161%" height="15" fill="rgb(247,173,49)"/><text x="70.0372%" y="223.50"></text></g><g><title>_int_free (3 samples, 0.12%)</title><rect x="69.7872%" y="197" width="0.1161%" height="15" fill="rgb(224,114,35)"/><text x="70.0372%" y="207.50"></text></g><g><title>__invoke (1,776 samples, 68.70%)</title><rect x="1.2379%" y="357" width="68.7041%" height="15" fill="rgb(245,159,27)"/><text x="1.4879%" y="367.50">__invoke</text></g><g><title>operator (1,776 samples, 68.70%)</title><rect x="1.2379%" y="341" width="68.7041%" height="15" fill="rgb(245,172,44)"/><text x="1.4879%" y="351.50">operator</text></g><g><title>~Rational (4 samples, 0.15%)</title><rect x="69.7872%" y="325" width="0.1547%" height="15" fill="rgb(236,23,11)"/><text x="70.0372%" y="335.50"></text></g><g><title>~number (4 samples, 0.15%)</title><rect x="69.7872%" y="309" width="0.1547%" height="15" fill="rgb(205,117,38)"/><text x="70.0372%" y="319.50"></text></g><g><title>~cpp_int_base (4 samples, 0.15%)</title><rect x="69.7872%" y="293" width="0.1547%" height="15" fill="rgb(237,72,25)"/><text x="70.0372%" y="303.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::deallocate (4 samples, 0.15%)</title><rect x="69.7872%" y="277" width="0.1547%" height="15" fill="rgb(244,70,9)"/><text x="70.0372%" y="287.50"></text></g><g><title>std::__1::__libcpp_deallocate (4 samples, 0.15%)</title><rect x="69.7872%" y="261" width="0.1547%" height="15" fill="rgb(217,125,39)"/><text x="70.0372%" y="271.50"></text></g><g><title>std::__1::__do_deallocate_handle_size&lt;&gt; (4 samples, 0.15%)</title><rect x="69.7872%" y="245" width="0.1547%" height="15" fill="rgb(235,36,10)"/><text x="70.0372%" y="255.50"></text></g><g><title>std::__1::__libcpp_operator_delete&lt;void*&gt; (4 samples, 0.15%)</title><rect x="69.7872%" y="229" width="0.1547%" height="15" fill="rgb(251,123,47)"/><text x="70.0372%" y="239.50"></text></g><g><title>cppcoro::detail::generator_iterator&lt;Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; &gt;::operator++ (3 samples, 0.12%)</title><rect x="69.9420%" y="357" width="0.1161%" height="15" fill="rgb(221,13,13)"/><text x="70.1920%" y="367.50"></text></g><g><title>std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume (3 samples, 0.12%)</title><rect x="69.9420%" y="341" width="0.1161%" height="15" fill="rgb(238,131,9)"/><text x="70.1920%" y="351.50"></text></g><g><title>cppcoro::fmap&lt;pi_leibniz_lfts()::{lambda(auto:1)#1}, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (3 samples, 0.12%)</title><rect x="69.9420%" y="325" width="0.1161%" height="15" fill="rgb(211,50,8)"/><text x="70.1920%" y="335.50"></text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (4 samples, 0.15%)</title><rect x="74.0812%" y="181" width="0.1547%" height="15" fill="rgb(245,182,24)"/><text x="74.3312%" y="191.50"></text></g><g><title>std::__1::allocator&lt;unsigned long long&gt;::allocate (3 samples, 0.12%)</title><rect x="74.1199%" y="165" width="0.1161%" height="15" fill="rgb(242,14,37)"/><text x="74.3699%" y="175.50"></text></g><g><title>std::__1::__libcpp_allocate (3 samples, 0.12%)</title><rect x="74.1199%" y="149" width="0.1161%" height="15" fill="rgb(246,228,12)"/><text x="74.3699%" y="159.50"></text></g><g><title>std::__1::__libcpp_operator_new&lt;unsigned long&gt; (3 samples, 0.12%)</title><rect x="74.1199%" y="133" width="0.1161%" height="15" fill="rgb(213,55,15)"/><text x="74.3699%" y="143.50"></text></g><g><title>operator new (3 samples, 0.12%)</title><rect x="74.1199%" y="117" width="0.1161%" height="15" fill="rgb(209,9,3)"/><text x="74.3699%" y="127.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.12%)</title><rect x="74.1199%" y="101" width="0.1161%" height="15" fill="rgb(230,59,30)"/><text x="74.3699%" y="111.50"></text></g><g><title>boost::multiprecision::backends::add_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (165 samples, 6.38%)</title><rect x="70.0580%" y="213" width="6.3830%" height="15" fill="rgb(209,121,21)"/><text x="70.3080%" y="223.50">boost::m..</text></g><g><title>boost::multiprecision::backends::add_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (165 samples, 6.38%)</title><rect x="70.0580%" y="197" width="6.3830%" height="15" fill="rgb(220,109,13)"/><text x="70.3080%" y="207.50">boost::m..</text></g><g><title>boost::multiprecision::std_constexpr::copy&lt;unsigned long long const*, unsigned long long*&gt; (57 samples, 2.21%)</title><rect x="74.2360%" y="181" width="2.2050%" height="15" fill="rgb(232,18,1)"/><text x="74.4860%" y="191.50">b..</text></g><g><title>__memmove_avx_unaligned_erms (57 samples, 2.21%)</title><rect x="74.2360%" y="165" width="2.2050%" height="15" fill="rgb(215,41,42)"/><text x="74.4860%" y="175.50">_..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (240 samples, 9.28%)</title><rect x="70.0580%" y="245" width="9.2843%" height="15" fill="rgb(224,123,36)"/><text x="70.3080%" y="255.50">boost::multip..</text></g><g><title>boost::multiprecision::backends::eval_add&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (240 samples, 9.28%)</title><rect x="70.0580%" y="229" width="9.2843%" height="15" fill="rgb(240,125,3)"/><text x="70.3080%" y="239.50">boost::multip..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (75 samples, 2.90%)</title><rect x="76.4410%" y="213" width="2.9014%" height="15" fill="rgb(205,98,50)"/><text x="76.6910%" y="223.50">bo..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (75 samples, 2.90%)</title><rect x="76.4410%" y="197" width="2.9014%" height="15" fill="rgb(205,185,37)"/><text x="76.6910%" y="207.50">bo..</text></g><g><title>Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator (405 samples, 15.67%)</title><rect x="70.0580%" y="341" width="15.6673%" height="15" fill="rgb(238,207,15)"/><text x="70.3080%" y="351.50">Spigot::LFT&lt;boost::multi..</text></g><g><title>number&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void&gt; (405 samples, 15.67%)</title><rect x="70.0580%" y="325" width="15.6673%" height="15" fill="rgb(213,199,42)"/><text x="70.3080%" y="335.50">number&lt;boost::multipreci..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (405 samples, 15.67%)</title><rect x="70.0580%" y="309" width="15.6673%" height="15" fill="rgb(235,201,11)"/><text x="70.3080%" y="319.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; (405 samples, 15.67%)</title><rect x="70.0580%" y="293" width="15.6673%" height="15" fill="rgb(207,46,11)"/><text x="70.3080%" y="303.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::multiply_add, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::terminal, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void, void&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void&gt; &gt; (405 samples, 15.67%)</title><rect x="70.0580%" y="277" width="15.6673%" height="15" fill="rgb(241,35,35)"/><text x="70.3080%" y="287.50">boost::multiprecision::n..</text></g><g><title>boost::multiprecision::default_ops::eval_multiply_add&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (405 samples, 15.67%)</title><rect x="70.0580%" y="261" width="15.6673%" height="15" fill="rgb(243,32,47)"/><text x="70.3080%" y="271.50">boost::multiprecision::d..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (165 samples, 6.38%)</title><rect x="79.3424%" y="245" width="6.3830%" height="15" fill="rgb(247,202,23)"/><text x="79.5924%" y="255.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_multiply&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (164 samples, 6.34%)</title><rect x="79.3810%" y="229" width="6.3443%" height="15" fill="rgb(219,102,11)"/><text x="79.6310%" y="239.50">boost::m..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::resize (3 samples, 0.12%)</title><rect x="85.6093%" y="213" width="0.1161%" height="15" fill="rgb(243,110,44)"/><text x="85.8593%" y="223.50"></text></g><g><title>__memmove_avx_unaligned_erms (47 samples, 1.82%)</title><rect x="91.2959%" y="197" width="1.8182%" height="15" fill="rgb(222,74,54)"/><text x="91.5459%" y="207.50">_..</text></g><g><title>boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;::operator= (49 samples, 1.90%)</title><rect x="91.2959%" y="229" width="1.8956%" height="15" fill="rgb(216,99,12)"/><text x="91.5459%" y="239.50">b..</text></g><g><title>boost::multiprecision::backends::cpp_int_base&lt;0u, 4294967295u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, false&gt;::assign (49 samples, 1.90%)</title><rect x="91.2959%" y="213" width="1.8956%" height="15" fill="rgb(226,22,26)"/><text x="91.5459%" y="223.50">b..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (167 samples, 6.46%)</title><rect x="93.2689%" y="229" width="6.4603%" height="15" fill="rgb(217,163,10)"/><text x="93.5189%" y="239.50">boost::m..</text></g><g><title>boost::multiprecision::backends::eval_subtract&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (167 samples, 6.46%)</title><rect x="93.2689%" y="213" width="6.4603%" height="15" fill="rgb(213,25,53)"/><text x="93.5189%" y="223.50">boost::m..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (167 samples, 6.46%)</title><rect x="93.2689%" y="197" width="6.4603%" height="15" fill="rgb(252,105,26)"/><text x="93.5189%" y="207.50">boost::m..</text></g><g><title>boost::multiprecision::backends::subtract_unsigned_constexpr&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (167 samples, 6.46%)</title><rect x="93.2689%" y="181" width="6.4603%" height="15" fill="rgb(220,39,43)"/><text x="93.5189%" y="191.50">boost::m..</text></g><g><title>Spigot::Rational&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::floor (364 samples, 14.08%)</title><rect x="85.7253%" y="341" width="14.0812%" height="15" fill="rgb(229,68,48)"/><text x="85.9753%" y="351.50">Spigot::Rational&lt;boos..</text></g><g><title>number&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0, 0, boost::multiprecision::signed_magnitude, boost::multiprecision::unchecked, std::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::et_on&gt;, void, void&gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="325" width="14.0812%" height="15" fill="rgb(252,8,32)"/><text x="85.9753%" y="335.50">number&lt;boost::multipr..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::operator=&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="309" width="14.0812%" height="15" fill="rgb(223,20,43)"/><text x="85.9753%" y="319.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="293" width="14.0812%" height="15" fill="rgb(229,81,49)"/><text x="85.9753%" y="303.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;::do_assign&lt;boost::multiprecision::detail::expression&lt;boost::multiprecision::detail::divide_immediates, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt;, void, void&gt; &gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="277" width="14.0812%" height="15" fill="rgb(236,28,36)"/><text x="85.9753%" y="287.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::eval_divide&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt;, 0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="261" width="14.0812%" height="15" fill="rgb(249,185,26)"/><text x="85.9753%" y="271.50">boost::multiprecision..</text></g><g><title>boost::multiprecision::backends::divide_unsigned_helper&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt; &gt; (364 samples, 14.08%)</title><rect x="85.7253%" y="245" width="14.0812%" height="15" fill="rgb(249,174,33)"/><text x="85.9753%" y="255.50">boost::multiprecision..</text></g><g><title>operator (771 samples, 29.83%)</title><rect x="70.0580%" y="357" width="29.8259%" height="15" fill="rgb(233,201,37)"/><text x="70.3080%" y="367.50">operator</text></g><g><title>__libc_start_main (2,562 samples, 99.11%)</title><rect x="0.8124%" y="437" width="99.1103%" height="15" fill="rgb(221,78,26)"/><text x="1.0624%" y="447.50">__libc_start_main</text></g><g><title>main (2,562 samples, 99.11%)</title><rect x="0.8124%" y="421" width="99.1103%" height="15" fill="rgb(250,127,30)"/><text x="1.0624%" y="431.50">main</text></g><g><title>cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;::operator++ (2,558 samples, 98.96%)</title><rect x="0.9671%" y="405" width="98.9555%" height="15" fill="rgb(230,49,44)"/><text x="1.2171%" y="415.50">cppcoro::detail::generator_iterator&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1..</text></g><g><title>std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume (2,558 samples, 98.96%)</title><rect x="0.9671%" y="389" width="98.9555%" height="15" fill="rgb(229,67,23)"/><text x="1.2171%" y="399.50">std::experimental::coroutines_v1::coroutine_handle&lt;void&gt;::resume</text></g><g><title>stream&lt;Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;, Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt;, boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multiprecision::cpp_int_check_type)0, std::__1::allocator&lt;unsigned long long&gt; &gt;, (boost::multiprecision::expression_template_option)1&gt; &gt; (2,558 samples, 98.96%)</title><rect x="0.9671%" y="373" width="98.9555%" height="15" fill="rgb(249,83,47)"/><text x="1.2171%" y="383.50">stream&lt;Spigot::LFT&lt;boost::multiprecision::number&lt;boost::multiprecision::backends::cpp_int_backend&lt;0u, 0u, (boost::multiprecision::cpp_integer_type)1, (boost::multipr..</text></g><g><title>all (2,585 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="495.50"></text></g><g><title>spigot_clang (2,585 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="479.50">spigot_clang</text></g><g><title>_start (2,569 samples, 99.38%)</title><rect x="0.6190%" y="453" width="99.3810%" height="15" fill="rgb(219,56,2)"/><text x="0.8690%" y="463.50">_start</text></g></svg></svg>